generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admin {
  id        Int    @id @default(autoincrement())
  fullname  String
  phone     String
  email     String @unique(map: "Admin_email_key")
  adminCode String
  username  String @unique(map: "Admin_username_key")
  password  String
}

model configuration {
  id              Int       @id @default(autoincrement())
  userId          Int
  createdAt       DateTime  @default(now())
  humidityMax     Float     @default(100)
  humidityMin     Float     @default(0)
  soilMoistureMax Float     @default(100)
  soilMoistureMin Float     @default(0)
  temperatureMax  Float     @default(100)
  temperatureMin  Float     @default(0)
  updatedAt       DateTime  @default(now()) @updatedAt
  user            user      @relation(fields: [userId], references: [id], map: "Configuration_userId_fkey")
  @@index([userId], map: "Configuration_userId_fkey")
}

model feed {
  id        Int       @id @default(autoincrement())
  name      String
  feedKey   String
  lastValue Float?
  deviceId  Int
  iotdevice iotdevice @relation(fields: [deviceId], references: [id], map: "Feed_deviceId_fkey")

  @@index([deviceId], map: "Feed_deviceId_fkey")
}

model iotdevice {
  id                      Int                       @id @default(autoincrement())
  deviceCode              String                    
  deviceType              iotdevice_deviceType
  description             String?
  createdAt               DateTime                  @default(now())
  feed                    feed[]
  lightdata               lightdata[]
  notification            notification[]
  pumpwaterdata           pumpwaterdata[]
  soilmoisturedata        soilmoisturedata[]
  temperaturehumiditydata temperaturehumiditydata[]
  scheduled               scheduled[]
}

model lightdata {
  id          Int              @id @default(autoincrement())
  status      lightdata_status
  readingTime DateTime         @default(now())
  deviceId    Int
  intensity   Int              @default(0)
  iotdevice   iotdevice        @relation(fields: [deviceId], references: [id], map: "LightData_deviceId_fkey")

  @@index([deviceId], map: "LightData_deviceId_fkey")
}

model notification {
  id        Int       @id @default(autoincrement())
  message   String
  type      String
  source    String?
  createdAt DateTime  @default(now())
  value     String?
  deviceId  Int
  iotdevice iotdevice @relation(fields: [deviceId], references: [id], map: "Notification_deviceId_fkey")

  @@index([deviceId], map: "Notification_deviceId_fkey")
}

model pumpwaterdata {
  id          Int       @id @default(autoincrement())
  status      String
  pumpSpeed   Int
  readingTime DateTime  @default(now())
  deviceId    Int
  iotdevice   iotdevice @relation(fields: [deviceId], references: [id], map: "PumpWaterData_deviceId_fkey")

  @@index([deviceId], map: "PumpWaterData_deviceId_fkey")

}

model soilmoisturedata {
  id            Int       @id @default(autoincrement())
  moistureValue Float
  readingTime   DateTime  @default(now())
  deviceId      Int
  iotdevice     iotdevice @relation(fields: [deviceId], references: [id], map: "SoilMoistureData_deviceId_fkey")

  @@index([deviceId], map: "SoilMoistureData_deviceId_fkey")
}

model temperaturehumiditydata {
  id              Int       @id @default(autoincrement())
  temperature     Float
  humidity        Float
  readingTime     DateTime  @default(now())
  deviceId        Int
  iotdevice       iotdevice @relation(fields: [deviceId], references: [id], map: "TemperatureHumidityData_deviceId_fkey")

  @@index([deviceId], map: "TemperatureHumidityData_deviceId_fkey")
}

model user {
  id                      Int                       @id @default(autoincrement())
  fullname                String
  username                String                    @unique(map: "User_username_key")
  password                String
  email                   String                    @unique(map: "User_email_key")
  phone                   String
  address                 String
  createdAt               DateTime                  @default(now())
  role                    String?                   @default("USER") @db.VarChar(10)
  isAccepted              Boolean?                  @default(false)
  configuration           configuration[]
  scheduled               scheduled[]
}

model scheduled {
  id               Int           @id @default(autoincrement())
  userId           Int
  deviceId         Int
  scheduleType     schedule_type
  enabled          Boolean       @default(false)
  startTime        String?       // Thời gian bắt đầu cho watering hoặc thời gian bật cho lighting (HH:MM)
  endTime          String?       // Thời gian tắt cho lighting (HH:MM)
  duration         Int?          // Thời lượng tưới cho watering (phút)
  speed            Int?          // Tốc độ bơm cho watering (0-100)
  days             String        // Các ngày trong tuần, lưu dạng JSON: ["monday", "wednesday", ...]
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  lastExecuted     DateTime?     // Thời điểm lịch trình được thực thi gần nhất
  nextExecution    DateTime?     // Thời điểm lịch trình sẽ được thực thi tiếp theo
  autoMode         Boolean       @default(true) // Chế độ tự động
  
  // Quan hệ
  user             user          @relation(fields: [userId], references: [id])
  device           iotdevice     @relation(fields: [deviceId], references: [id])
}

enum schedule_type {
  watering
  lighting
}

enum lightdata_status {
  On
  Off
}

enum iotdevice_deviceType {
  temperature_humidity
  soil_moisture
  pump_water
  light
}

enum iotdevice_status {
  On
  Off
}
