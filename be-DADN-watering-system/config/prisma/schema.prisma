// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = "mysql://root:123456@localhost/watering-system"
}

enum StatusType {
  On
  Off
}

enum DeviceType {
  temperature_humidity
  soil_moisture
  pump_water
  light
}

model Admin {
  id        Int      @id @default(autoincrement())
  fullname  String
  phone     String
  email     String   @unique
  adminCode String
  username  String   @unique
  password  String
}

model User {
  id             Int             @id @default(autoincrement())
  fullname       String
  username       String          @unique
  password       String
  email          String          @unique
  phone          String
  address        String
  configurations Configuration[] @relation("UserConfigurations")
}

model IoTDevice {
  id                      Int                      @id @default(autoincrement())
  deviceCode              String                   @unique
  deviceType              DeviceType
  status                  StatusType
  description             String?
  createdAt               DateTime                 @default(now())
  mqttUsername            String?
  mqttApiKey              String?
  isOnline                Boolean                  @default(false)
  lastSeen                DateTime?
  lastSeenAt              DateTime?
  feeds                   Feed[]                   @relation("DeviceFeeds")
  temperatureHumidityData TemperatureHumidityData[] @relation("DeviceTemperatureHumidity")
  soilMoistureData        SoilMoistureData[]       @relation("DeviceSoilMoisture")
  pumpWaterData           PumpWaterData[]          @relation("DevicePumpWater")
  lightData               LightData[]              @relation("DeviceLight")
  configurations          Configuration[]          @relation("DeviceConfigurations")
  notifications           Notification[]           @relation("DeviceLogs")
}

model TemperatureHumidityData {
  id           Int       @id @default(autoincrement())
  temperature  Float
  humidity     Float
  readingTime  DateTime  @default(now())
  deviceId     Int
  device       IoTDevice @relation("DeviceTemperatureHumidity", fields: [deviceId], references: [id])
}

model SoilMoistureData {
  id            Int       @id @default(autoincrement())
  moistureValue Float
  readingTime   DateTime  @default(now())
  deviceId      Int
  device        IoTDevice @relation("DeviceSoilMoisture", fields: [deviceId], references: [id])
}

model PumpWaterData {
  id          Int       @id @default(autoincrement())
  status      String
  pumpSpeed   Int
  readingTime DateTime  @default(now())
  deviceId    Int
  device      IoTDevice @relation("DevicePumpWater", fields: [deviceId], references: [id])
}

model Configuration {
  id         Int         @id @default(autoincrement())
  value      String
  updateAt   DateTime    @default(now())
  userId     Int
  user       User        @relation("UserConfigurations", fields: [userId], references: [id])
  deviceId   Int
  device     IoTDevice   @relation("DeviceConfigurations", fields: [deviceId], references: [id])
}

model Notification {
  id         Int      @id @default(autoincrement())
  message    String   // Nội dung chi tiết của thông báo
  type       String   // Loại thông báo (ví dụ: "THRESHOLD", "CONNECTION", "PUMP", "UPDATE", "TEST")
  source     String?  // Nguồn phát sinh thông báo (có thể là tên hoặc ID của thiết bị/cảm biến)
  createdAt  DateTime @default(now())
  value      String?  // Giá trị liên quan đến thông báo
  timestamp  DateTime @default(now()) // Thời gian tạo thông báo
  deviceId   Int
  device     IoTDevice    @relation("DeviceLogs", fields: [deviceId], references: [id])
  isRead     Boolean  @default(false) // Trạng thái đã đọc/chưa đọc
}

model Feed {
  id          Int          @id @default(autoincrement())
  name        String
  feedKey     String
  minValue    Float?
  maxValue    Float?
  lastValue   Float?
  deviceId    Int
  device      IoTDevice    @relation("DeviceFeeds", fields: [deviceId], references: [id])
}

model LightData {
  id          Int       @id @default(autoincrement())
  status      StatusType
  intensity   Int       @default(0)
  readingTime DateTime  @default(now())
  deviceId    Int
  device      IoTDevice @relation("DeviceLight", fields: [deviceId], references: [id])
}

