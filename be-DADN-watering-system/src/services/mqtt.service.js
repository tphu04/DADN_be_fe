const mqtt = require('mqtt');
const prisma = require('../../config/database');
require('dotenv').config();

// L∆∞u c√°c gi√° tr·ªã ƒë√£ x·ª≠ l√Ω g·∫ßn ƒë√¢y ƒë·ªÉ tr√°nh l·∫∑p l·∫°i
const processedValues = new Map();

class MQTTService {
    constructor() {
        console.log('MQTTService constructor');
        this.deviceConnections = new Map();
        this.isConnected = false;
        this.feeds = {};
        this.io = null; // Bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ ƒë·ªëi t∆∞·ª£ng Socket.IO

        // L·∫•y th√¥ng tin k·∫øt n·ªëi t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
        this.username = process.env.MQTT_USERNAME || 'leduccuongks0601';
        this.password = process.env.MQTT_API_KEY || 'aio_SNIo23qcDoXgGUptXfEwQk73o40p';
        this.broker = process.env.MQTT_BROKER || 'io.adafruit.com';

        // Hi·ªÉn th·ªã th√¥ng tin k·∫øt n·ªëi (che password)
        console.log(`ƒêang k·∫øt n·ªëi t·ªõi MQTT broker: mqtt://${this.username}:***@${this.broker}`);

        // Kh·ªüi t·∫°o k·∫øt n·ªëi MQTT
        try {
            this.client = mqtt.connect(`mqtt://${this.username}:${this.password}@${this.broker}`, {
                clientId: 'backend_' + Math.random().toString(16).substring(2, 8),
                clean: true,
                connectTimeout: 30000,
                reconnectPeriod: 5000,
                keepalive: 60
            });

            // Thi·∫øt l·∫≠p c√°c event handlers
            this._setupEventHandlers();
        } catch (error) {
            console.error('L·ªói kh·ªüi t·∫°o MQTT client:', error);
        }
    }

    _setupEventHandlers() {
        // X·ª≠ l√Ω s·ª± ki·ªán k·∫øt n·ªëi
        this.client.on('connect', () => {
            console.log('‚úÖ ƒê√É K·∫æT N·ªêI TH√ÄNH C√îNG t·ªõi MQTT broker!');
            this.isConnected = true;
        });

        // X·ª≠ l√Ω s·ª± ki·ªán reconnect
        this.client.on('reconnect', () => {
            console.log('ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i v·ªõi MQTT broker...');
        });

        // X·ª≠ l√Ω s·ª± ki·ªán error
        this.client.on('error', (err) => {
            console.error('‚ùå L·ªói k·∫øt n·ªëi MQTT:', err.message);
            this.isConnected = false;
        });

        // X·ª≠ l√Ω s·ª± ki·ªán close
        this.client.on('close', () => {
            console.log('K·∫øt n·ªëi MQTT ƒë√£ ƒë√≥ng');
            this.isConnected = false;
        });

        // X·ª≠ l√Ω s·ª± ki·ªán message
        this.client.on('message', async (topic, message) => {
            try {
                console.log(`üì© Nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn t·ª´ topic ${topic}: ${message.toString()}`);

                // X·ª≠ l√Ω d·ªØ li·ªáu ·ªü ƒë√¢y
                await this._processReceivedData(topic, message);
            } catch (error) {
                console.error('L·ªói x·ª≠ l√Ω tin nh·∫Øn MQTT:', error);
            }
        });
    }

    // Ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi
    checkConnection() {
        return this.isConnected && this.client && this.client.connected;
    }

    // Ph∆∞∆°ng th·ª©c ƒë·ªÉ thi·∫øt l·∫≠p ƒë·ªëi t∆∞·ª£ng Socket.IO
    setSocketIO(io) {
        this.io = io;
        console.log('‚úÖ ƒê√£ thi·∫øt l·∫≠p Socket.IO cho MQTT service');
    }

    // Ph∆∞∆°ng th·ª©c ƒë·ªÉ g·ª≠i d·ªØ li·ªáu c·∫≠p nh·∫≠t qua socket
    emitSensorUpdate(data) {
        if (!this.io) {
            console.warn('‚ö†Ô∏è Socket.IO ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p, kh√¥ng th·ªÉ g·ª≠i d·ªØ li·ªáu c·∫≠p nh·∫≠t');
            return;
        }

        console.log('üì° ƒêang g·ª≠i d·ªØ li·ªáu c·∫≠p nh·∫≠t qua socket');
        this.io.emit('sensor-update', data);
    }

    // Ph∆∞∆°ng th·ª©c x·ª≠ l√Ω d·ªØ li·ªáu - ph·∫£i ƒë∆∞·ª£c ƒë·∫∑t b√™n trong class
    async _processReceivedData(topic, message) {
        try {
            // Parse gi√° tr·ªã t·ª´ message
            let value;
            try {
                // Th·ª≠ parse JSON
                value = JSON.parse(message.toString());
            } catch (e) {
                // N·∫øu kh√¥ng ph·∫£i JSON, th·ª≠ convert sang s·ªë
                value = parseFloat(message.toString());
                if (isNaN(value)) {
                    // N·∫øu kh√¥ng ph·∫£i s·ªë, gi·ªØ nguy√™n string
                    value = message.toString().trim();
                }
            }

            // L∆∞u v√†o internal cache
            this.feeds[topic] = {
                value,
                timestamp: new Date(),
                raw: message.toString()
            };

            // Ph√¢n t√≠ch th√¥ng tin topic ƒë·ªÉ l·∫•y feedKey
            // V√≠ d·ª•: leduccuongks0601/feeds/dht20-nhietdo
            const parts = topic.split('/');
            if (parts.length < 3 || parts[1] !== 'feeds') {
                console.log(`Topic kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng: ${topic}`);
                return;
            }

            const feedKey = parts[2];
            console.log(`X·ª≠ l√Ω d·ªØ li·ªáu cho feed: ${feedKey}`);

            // T√¨m thi·∫øt b·ªã v√† feed t∆∞∆°ng ·ª©ng trong database
            let device, feed;

            // T√¨m feed tr∆∞·ªõc
            feed = await prisma.feed.findFirst({
                where: { feedKey },
                include: { device: true }
            });

            if (feed) {
                device = feed.device;
                console.log(`T√¨m th·∫•y feed ${feed.name} c·ªßa thi·∫øt b·ªã ${device.deviceCode}`);
            } else {
                // N·∫øu kh√¥ng t√¨m th·∫•y feed, t√¨m thi·∫øt b·ªã ph√π h·ª£p
                if (feedKey.includes('nhietdo') || feedKey.includes('temp')) {
                    device = await prisma.ioTDevice.findFirst({
                        where: { deviceType: 'temperature_humidity' }
                    });
                } else if (feedKey.includes('doam') || feedKey.includes('hum')) {
                    device = await prisma.ioTDevice.findFirst({
                        where: { deviceType: 'temperature_humidity' }
                    });
                } else if (feedKey.includes('soil') || feedKey.includes('dat')) {
                    device = await prisma.ioTDevice.findFirst({
                        where: { deviceType: 'soil_moisture' }
                    });
                } else if (feedKey.includes('pump') || feedKey.includes('bom')) {
                    device = await prisma.ioTDevice.findFirst({
                        where: { deviceType: 'pump_water' }
                    });
                }

                if (!device) {
                    console.log(`Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã ph√π h·ª£p cho feed ${feedKey}`);
                    return;
                }

                console.log(`T√¨m th·∫•y thi·∫øt b·ªã ${device.deviceCode} ph√π h·ª£p v·ªõi feed ${feedKey}`);

                // T·ª± ƒë·ªông t·∫°o feed n·∫øu ch∆∞a c√≥
                feed = await prisma.feed.create({
                    data: {
                        name: feedKey,
                        feedKey: feedKey,
                        description: `Feed t·ª± ƒë·ªông t·∫°o cho ${feedKey}`,
                        deviceId: device.id
                    }
                });
                console.log(`ƒê√£ t·∫°o feed m·ªõi: ${feed.name}`);
            }

            // L·∫•y gi√° tr·ªã s·ªë t·ª´ d·ªØ li·ªáu
            let numericValue = null;
            if (typeof value === 'number') {
                numericValue = value;
            } else if (typeof value === 'string') {
                numericValue = parseFloat(value);
            } else if (typeof value === 'object' && value !== null) {
                // C√°c tr∆∞·ªùng th∆∞·ªùng g·∫∑p trong object t·ª´ Adafruit
                if (value.value !== undefined) {
                    numericValue = parseFloat(value.value);
                } else if (value.last_value !== undefined) {
                    numericValue = parseFloat(value.last_value);
                }
            }

            if (isNaN(numericValue)) {
                console.log(`Kh√¥ng th·ªÉ parse gi√° tr·ªã th√†nh s·ªë`);
                return;
            }

            // C·∫≠p nh·∫≠t tr·∫°ng th√°i thi·∫øt b·ªã
            await prisma.ioTDevice.update({
                where: { id: device.id },
                data: {
                    status: 'On',
                    isOnline: true,
                    lastSeen: new Date(),
                    lastSeenAt: new Date()
                }
            });

            // C·∫≠p nh·∫≠t gi√° tr·ªã m·ªõi nh·∫•t c·ªßa feed
            await prisma.feed.update({
                where: { id: feed.id },
                data: { lastValue: numericValue }
            });

            // Ki·ªÉm tra xem c·∫£ hai feed ƒë√£ c√≥ gi√° tr·ªã ch∆∞a (nhi·ªát ƒë·ªô v√† ƒë·ªô ·∫©m)
            const feedKeyTemperature = 'dht20-nhietdo'; // Feed nhi·ªát ƒë·ªô
            const feedKeyHumidity = 'dht20-doam'; // Feed ƒë·ªô ·∫©m

            if (feedKey.includes('soil') || feedKey.includes('doamdat')) {
                console.log(`üìä ƒê√£ l∆∞u d·ªØ li·ªáu ƒë·ªô ·∫©m ƒë·∫•t: ${numericValue}%`);
                await prisma.soilMoistureData.create({
                    data: {
                        moistureValue: numericValue,
                        deviceId: device.id
                    }
                });
            }
            // N·∫øu c·∫£ hai feed ƒë√£ c√≥ d·ªØ li·ªáu, th√¨ l∆∞u ch√∫ng v√†o c∆° s·ªü d·ªØ li·ªáu
            else if (this.feeds[`${this.username}/feeds/${feedKeyTemperature}`] && this.feeds[`${this.username}/feeds/${feedKeyHumidity}`]) {
                const temperatureValue = this.feeds[`${this.username}/feeds/${feedKeyTemperature}`].value;
                const humidityValue = this.feeds[`${this.username}/feeds/${feedKeyHumidity}`].value;

                console.log(`C·∫£ nhi·ªát ƒë·ªô v√† ƒë·ªô ·∫©m ƒë·ªÅu c√≥ gi√° tr·ªã: ${temperatureValue} v√† ${humidityValue}`);

                // L∆∞u nhi·ªát ƒë·ªô v√† ƒë·ªô ·∫©m v√†o c∆° s·ªü d·ªØ li·ªáu
                await prisma.temperatureHumidityData.create({
                    data: {
                        temperature: temperatureValue,
                        humidity: humidityValue,
                        deviceId: device.id
                    }
                });

                console.log(`üìä ƒê√£ l∆∞u d·ªØ li·ªáu nhi·ªát ƒë·ªô: ${temperatureValue}¬∞C v√† ƒë·ªô ·∫©m: ${humidityValue}%`);

                // X√≥a cache sau khi l∆∞u ƒë·ªÉ tr√°nh l·∫∑p l·∫°i
                delete this.feeds[`${this.username}/feeds/${feedKeyTemperature}`];
                delete this.feeds[`${this.username}/feeds/${feedKeyHumidity}`];
            }
            // N·∫øu ch·ªâ nh·∫≠n ƒë∆∞·ª£c m·ªôt trong hai feed, ch·ªâ l∆∞u d·ªØ li·ªáu c·ªßa feed ƒë√≥
            else if (feedKey.includes('nhietdo') || feedKey.includes('temp')) {
                console.log(`üìä ƒê√£ l∆∞u d·ªØ li·ªáu nhi·ªát ƒë·ªô: ${numericValue}¬∞C`);
                await prisma.temperatureHumidityData.create({
                    data: {
                        temperature: numericValue,
                        humidity: 0, // M·∫∑c ƒë·ªãnh, ƒë·ªô ·∫©m l√† 0 cho ƒë·∫øn khi nh·∫≠n ƒë∆∞·ª£c gi√° tr·ªã ƒë·ªô ·∫©m
                        deviceId: device.id
                    }
                });
            }
            // Ki·ªÉm tra c·ª• th·ªÉ cho ƒë·ªô ·∫©m ƒë·∫•t

            // Ki·ªÉm tra cho ƒë·ªô ·∫©m kh√¥ng kh√≠ (ch·ªâ nh·ªØng feed kh√¥ng ph·∫£i ƒë·ªô ·∫©m ƒë·∫•t)
            else if ((feedKey.includes('doam') || feedKey.includes('hum')) &&
                !feedKey.includes('dat') && !feedKey.includes('soil')) {
                console.log(`üìä ƒê√£ l∆∞u d·ªØ li·ªáu ƒë·ªô ·∫©m kh√¥ng kh√≠: ${numericValue}%`);
                await prisma.temperatureHumidityData.create({
                    data: {
                        temperature: 0,
                        humidity: numericValue,
                        deviceId: device.id
                    }
                });
            } else if (feedKey.includes('pump') || feedKey.includes('bom')) {
                // X·ª≠ l√Ω kh√°c nhau cho status v√† speed c·ªßa m√°y b∆°m
                if (feedKey.includes('status')) {
                    // ƒê√¢y l√† tr·∫°ng th√°i m√°y b∆°m (ON/OFF)
                    const pumpStatus = numericValue === 1 ? 'Active' : 'Inactive';

                    // T√¨m b·∫£n ghi g·∫ßn nh·∫•t ƒë·ªÉ l·∫•y gi√° tr·ªã speed
                    const latestPumpData = await prisma.pumpWaterData.findFirst({
                        where: { deviceId: device.id },
                        orderBy: { readingTime: 'desc' }
                    });

                    const pumpSpeed = latestPumpData ? latestPumpData.pumpSpeed : 0;

                    console.log(`üìä ƒê√£ l∆∞u d·ªØ li·ªáu tr·∫°ng th√°i m√°y b∆°m: ${pumpStatus} (${pumpSpeed}%)`);
                    await prisma.pumpWaterData.create({
                        data: {
                            status: pumpStatus,
                            pumpSpeed: pumpSpeed,
                            deviceId: device.id
                        }
                    });
                } else if (feedKey.includes('speed')) {
                    // ƒê√¢y l√† t·ªëc ƒë·ªô m√°y b∆°m (%)
                    // Gi·ªõi h·∫°n gi√° tr·ªã t·ª´ 0 ƒë·∫øn 100
                    const pumpSpeed = Math.max(0, Math.min(100, Math.round(numericValue)));

                    // T√¨m b·∫£n ghi g·∫ßn nh·∫•t ƒë·ªÉ l·∫•y gi√° tr·ªã status
                    const latestPumpData = await prisma.pumpWaterData.findFirst({
                        where: { deviceId: device.id },
                        orderBy: { readingTime: 'desc' }
                    });

                    const pumpStatus = latestPumpData ? latestPumpData.status :
                        (pumpSpeed > 0 ? 'Active' : 'Inactive');

                    console.log(`üìä ƒê√£ l∆∞u d·ªØ li·ªáu t·ªëc ƒë·ªô m√°y b∆°m: ${pumpSpeed}% (${pumpStatus})`);
                    await prisma.pumpWaterData.create({
                        data: {
                            status: pumpStatus,
                            pumpSpeed: pumpSpeed,
                            deviceId: device.id
                        }
                    });
                } else {
                    // M·∫∑c ƒë·ªãnh l√† status v·ªõi logic ON/OFF
                    const pumpStatus = numericValue > 0 ? 'Active' : 'Inactive';
                    const pumpSpeed = numericValue > 0 ? Math.round(numericValue) : 0;

                    console.log(`üìä ƒê√£ l∆∞u d·ªØ li·ªáu m√°y b∆°m: ${pumpStatus} (${pumpSpeed}%)`);
                    await prisma.pumpWaterData.create({
                        data: {
                            status: pumpStatus,
                            pumpSpeed: pumpSpeed,
                            deviceId: device.id
                        }
                    });
                }
            }

            // Sau khi l∆∞u d·ªØ li·ªáu, g·ª≠i th√¥ng b√°o c·∫≠p nh·∫≠t qua WebSocket

            // ƒê·ªëi v·ªõi nhi·ªát ƒë·ªô v√† ƒë·ªô ·∫©m
            if (feedKey.includes('nhietdo') || feedKey.includes('temp') ||
                ((feedKey.includes('doam') || feedKey.includes('hum')) &&
                    !feedKey.includes('dat') && !feedKey.includes('soil'))) {

                // L·∫•y d·ªØ li·ªáu m·ªõi nh·∫•t c·ªßa thi·∫øt b·ªã
                const latestData = await prisma.temperatureHumidityData.findFirst({
                    where: { deviceId: device.id },
                    orderBy: { readingTime: 'desc' }
                });

                if (latestData) {
                    this.emitSensorUpdate({
                        type: 'temperature_humidity',
                        data: {
                            deviceId: device.id,
                            deviceName: device.deviceCode,
                            deviceType: 'temperature_humidity',
                            temperature: latestData.temperature,
                            humidity: latestData.humidity,
                            timestamp: latestData.readingTime
                        }
                    });
                }
            }

            // ƒê·ªëi v·ªõi ƒë·ªô ·∫©m ƒë·∫•t
            else if (feedKey.includes('soil') || feedKey.includes('dat') || feedKey.includes('doamdat')) {
                // L·∫•y d·ªØ li·ªáu m·ªõi nh·∫•t c·ªßa thi·∫øt b·ªã
                const latestData = await prisma.soilMoistureData.findFirst({
                    where: { deviceId: device.id },
                    orderBy: { readingTime: 'desc' }
                });

                if (latestData) {
                    this.emitSensorUpdate({
                        type: 'soil_moisture',
                        data: {
                            deviceId: device.id,
                            deviceName: device.deviceCode,
                            deviceType: 'soil_moisture',
                            soilMoisture: latestData.moistureValue,
                            timestamp: latestData.readingTime
                        }
                    });
                }
            }

            // ƒê·ªëi v·ªõi m√°y b∆°m
            else if (feedKey.includes('pump') || feedKey.includes('bom')) {
                // L·∫•y d·ªØ li·ªáu m·ªõi nh·∫•t c·ªßa thi·∫øt b·ªã
                const latestData = await prisma.pumpWaterData.findFirst({
                    where: { deviceId: device.id },
                    orderBy: { readingTime: 'desc' }
                });

                if (latestData) {
                    this.emitSensorUpdate({
                        type: 'pump_water',
                        data: {
                            deviceId: device.id,
                            deviceName: device.deviceCode,
                            deviceType: 'pump_water',
                            status: latestData.status,
                            pumpSpeed: latestData.pumpSpeed,
                            timestamp: latestData.readingTime
                        }
                    });
                }
            }

            console.log(`‚úÖ Ho√†n t·∫•t x·ª≠ l√Ω d·ªØ li·ªáu cho feed ${feedKey}`);
            return true;
        } catch (error) {
            console.error(`‚ùå L·ªói x·ª≠ l√Ω d·ªØ li·ªáu cho topic ${topic}:`, error);
            return false;
        }
    }

    // Ph∆∞∆°ng th·ª©c k·∫øt n·ªëi thi·∫øt b·ªã
    async connectDevice(device) {
        try {
            console.log(`ƒêang k·∫øt n·ªëi thi·∫øt b·ªã ${device.deviceCode} v·ªõi MQTT`);

            // Ki·ªÉm tra k·∫øt n·ªëi
            if (!this.checkConnection()) {
                console.warn(`‚ö†Ô∏è MQTT ch∆∞a k·∫øt n·ªëi, kh√¥ng th·ªÉ k·∫øt n·ªëi thi·∫øt b·ªã ${device.deviceCode}`);
                return false;
            }

            // X√°c ƒë·ªãnh c√°c topics c·∫ßn ƒëƒÉng k√Ω
            const topics = [];

            if (device.feeds && device.feeds.length > 0) {
                // N·∫øu thi·∫øt b·ªã c√≥ feeds ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a s·∫µn
                for (const feed of device.feeds) {
                    topics.push(`${this.username}/feeds/${feed.feedKey}`);
                }
            } else {
                // ƒêƒÉng k√Ω d·ª±a v√†o lo·∫°i thi·∫øt b·ªã
                if (device.deviceType === 'temperature_humidity') {
                    topics.push(`${this.username}/feeds/dht20-nhietdo`);
                    topics.push(`${this.username}/feeds/dht20-doam`);
                } else if (device.deviceType === 'soil_moisture') {
                    topics.push(`${this.username}/feeds/doamdat`);
                } else if (device.deviceType === 'pump_water') {
                    topics.push(`${this.username}/feeds/maybom`);
                }
            }

            // ƒêƒÉng k√Ω c√°c topics
            for (const topic of topics) {
                this.client.subscribe(topic, (err) => {
                    if (err) {
                        console.error(`‚ùå L·ªói ƒëƒÉng k√Ω topic ${topic}:`, err);
                    } else {
                        console.log(`‚úÖ ƒê√£ ƒëƒÉng k√Ω topic ${topic} cho thi·∫øt b·ªã ${device.deviceCode}`);
                    }
                });
            }

            // C·∫≠p nh·∫≠t tr·∫°ng th√°i thi·∫øt b·ªã
            await prisma.ioTDevice.update({
                where: { id: device.id },
                data: {
                    status: 'On',
                    isOnline: true,
                    lastSeen: new Date(),
                    lastSeenAt: new Date()
                }
            });

            // L∆∞u th√¥ng tin k·∫øt n·ªëi
            this.deviceConnections.set(device.id, {
                deviceCode: device.deviceCode,
                deviceType: device.deviceType,
                topics: topics
            });

            console.log(`‚úÖ ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng thi·∫øt b·ªã ${device.deviceCode}`);
            return true;
        } catch (error) {
            console.error(`‚ùå L·ªói k·∫øt n·ªëi thi·∫øt b·ªã ${device.deviceCode}:`, error);
            return false;
        }
    }

    // Ph∆∞∆°ng th·ª©c ƒëƒÉng k√Ω nh·∫≠n d·ªØ li·ªáu t·ª´ t·∫•t c·∫£ feeds
    async subscribeToAllFeeds() {
        if (!this.checkConnection()) {
            console.error('MQTT ch∆∞a k·∫øt n·ªëi, kh√¥ng th·ªÉ ƒëƒÉng k√Ω feeds');
            return false;
        }

        try {
            // ƒêƒÉng k√Ω feed wildcard ƒë·ªÉ nh·∫≠n t·∫•t c·∫£ d·ªØ li·ªáu
            this.client.subscribe(`${this.username}/feeds/feed`, (err) => {
                if (err) {
                    console.error(`L·ªói ƒëƒÉng k√Ω wildcard topic:`, err);
                } else {
                    console.log(`‚úÖ ƒê√£ ƒëƒÉng k√Ω topic ƒë·ªÉ nh·∫≠n t·∫•t c·∫£ feeds`);
                }
            });

            return true;
        } catch (error) {
            console.error('L·ªói khi ƒëƒÉng k√Ω feeds:', error);
            return false;
        }
    }

    // Th√™m ph∆∞∆°ng th·ª©c waitForConnection n·∫øu Server.js c·∫ßn
    async waitForConnection(timeout = 15000) {
        return new Promise((resolve) => {
            if (this.checkConnection()) {
                resolve(true);
                return;
            }

            const connectHandler = () => {
                resolve(true);
            };

            this.client.once('connect', connectHandler);

            setTimeout(() => {
                this.client.removeListener('connect', connectHandler);
                resolve(this.checkConnection());
            }, timeout);
        });
    }
}

// T·∫°o v√† xu·∫•t instance duy nh·∫•t
const mqttService = new MQTTService();
module.exports = mqttService;