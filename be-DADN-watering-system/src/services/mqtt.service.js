const mqtt = require('mqtt');
const prisma = require('../../config/database');
const notificationService = require('./notificationService');
require('dotenv').config();

// L∆∞u c√°c gi√° tr·ªã ƒë√£ x·ª≠ l√Ω g·∫ßn ƒë√¢y ƒë·ªÉ tr√°nh l·∫∑p l·∫°i
const processedValues = new Map();

class MQTTService {
    constructor() {
        console.log('MQTTService constructor');
        this.deviceConnections = new Map();
        this.deviceMQTTClients = new Map(); // Map ƒë·ªÉ l∆∞u k·∫øt n·ªëi MQTT cho m·ªói thi·∫øt b·ªã
        this.isConnected = false;
        this.feeds = {};
        this.io = null; // Bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ ƒë·ªëi t∆∞·ª£ng Socket.IO

        // L·∫•y th√¥ng tin k·∫øt n·ªëi t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
        this.username = process.env.MQTT_USERNAME || 'leduccuongks0601';
        this.password = process.env.MQTT_API_KEY || 'aio_SNIo23qcDoXgGUptXfEwQk73o40p';
        this.broker = process.env.MQTT_BROKER || 'io.adafruit.com';

        // Hi·ªÉn th·ªã th√¥ng tin k·∫øt n·ªëi (che password)
        console.log(`üîå ƒêang k·∫øt n·ªëi t·ªõi MQTT broker m·∫∑c ƒë·ªãnh: mqtt://${this.username}:***@${this.broker}`);

        // Kh·ªüi t·∫°o k·∫øt n·ªëi MQTT m·∫∑c ƒë·ªãnh
        try {
            this.client = mqtt.connect(`mqtt://${this.username}:${this.password}@${this.broker}`, {
                clientId: 'backend_' + Math.random().toString(16).substring(2, 8),
                clean: true,
                connectTimeout: 30000,
                reconnectPeriod: 5000,
                keepalive: 60,
                port: 1883 // Th√™m port m·∫∑c ƒë·ªãnh cho MQTT
            });

            // Thi·∫øt l·∫≠p c√°c event handlers
            this._setupEventHandlers();

            // ƒêƒÉng k√Ω t·∫•t c·∫£ c√°c topics c·∫ßn thi·∫øt
            this._subscribeToDefaultTopics();
        } catch (error) {
            console.error('‚ùå L·ªói kh·ªüi t·∫°o MQTT client:', error);
        }
    }

    _setupEventHandlers() {
        // X·ª≠ l√Ω s·ª± ki·ªán k·∫øt n·ªëi
        this.client.on('connect', () => {
            console.log('‚úÖ ƒê√É K·∫æT N·ªêI TH√ÄNH C√îNG t·ªõi MQTT broker!');
            this.isConnected = true;
        });

        // X·ª≠ l√Ω s·ª± ki·ªán reconnect
        this.client.on('reconnect', () => {
            console.log('ƒêang th·ª≠ k·∫øt n·ªëi l·∫°i v·ªõi MQTT broker...');
        });

        // X·ª≠ l√Ω s·ª± ki·ªán error
        this.client.on('error', (err) => {
            console.error('‚ùå L·ªói k·∫øt n·ªëi MQTT:', err.message);
            this.isConnected = false;
        });

        // X·ª≠ l√Ω s·ª± ki·ªán close
        this.client.on('close', () => {
            console.log('K·∫øt n·ªëi MQTT ƒë√£ ƒë√≥ng');
            this.isConnected = false;
        });

        // X·ª≠ l√Ω s·ª± ki·ªán message
        this.client.on('message', async (topic, message) => {
            try {
                console.log(`üì© Nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn t·ª´ topic ${topic}: ${message.toString()}`);
                console.log(`üîç Chi ti·∫øt tin nh·∫Øn:`, {
                    topic,
                    message: message.toString(),
                    timestamp: new Date().toISOString()
                });

                // X·ª≠ l√Ω d·ªØ li·ªáu ·ªü ƒë√¢y
                await this._processReceivedData(topic, message.toString());
            } catch (error) {
                console.error('‚ùå L·ªói x·ª≠ l√Ω tin nh·∫Øn MQTT:', error);
                console.error('Chi ti·∫øt l·ªói:', {
                    topic,
                    message: message.toString(),
                    error: error.message,
                    stack: error.stack
                });
            }
        });
    }

    // Ki·ªÉm tra tr·∫°ng th√°i k·∫øt n·ªëi
    checkConnection() {
        return this.isConnected && this.client && this.client.connected;
    }

    // Ph∆∞∆°ng th·ª©c ƒë·ªÉ thi·∫øt l·∫≠p ƒë·ªëi t∆∞·ª£ng Socket.IO
    setSocketIO(io) {
        this.io = io;
        console.log('‚úÖ ƒê√£ thi·∫øt l·∫≠p Socket.IO cho MQTT service');
        // Thi·∫øt l·∫≠p Socket.IO cho notification service
        notificationService.setSocketIO(io);
    }

    // Ph∆∞∆°ng th·ª©c ƒë·ªÉ g·ª≠i d·ªØ li·ªáu c·∫≠p nh·∫≠t qua socket
    emitSensorUpdate(data) {
        if (!this.io) {
            console.warn('‚ö†Ô∏è Socket.IO ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p, kh√¥ng th·ªÉ g·ª≠i d·ªØ li·ªáu c·∫≠p nh·∫≠t');
            return;
        }

        // G·ª≠i d·ªØ li·ªáu c·∫≠p nh·∫≠t cho t·∫•t c·∫£ ng∆∞·ªùi d√πng
        console.log('üîî G·ª≠i d·ªØ li·ªáu c·∫≠p nh·∫≠t cho t·∫•t c·∫£ ng∆∞·ªùi d√πng', data);
        
        // Th√™m timestamp n·∫øu ch∆∞a c√≥
        if (!data.timestamp) {
            data.timestamp = new Date().toISOString();
        }
        
        // G·ª≠i v·ªõi event name 'sensor_update' cho t·∫•t c·∫£ client
        this.io.emit('sensor_update', data);
        
        // ƒê·∫£m b·∫£o g·ª≠i v·ªõi event name 'sensor-update' (d·∫•u g·∫°ch ngang) n·∫øu frontend s·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng n√†y
        this.io.emit('sensor-update', data);
    }

    // Th√™m ph∆∞∆°ng th·ª©c _updateDeviceStatus
    async _updateDeviceStatus(deviceId, feedKey, value) {
        try {
            // C·∫≠p nh·∫≠t lastSeen c·ªßa thi·∫øt b·ªã
            await prisma.iotdevice.update({
                where: { id: deviceId },
                data: {
                    isOnline: true,
                    lastSeen: new Date(),
                    lastSeenAt: new Date()
                }
            });
            console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i thi·∫øt b·ªã ${deviceId} - Feed ${feedKey}: ${value}`);
            return true;
        } catch (error) {
            console.error(`‚ùå L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i thi·∫øt b·ªã: ${error.message}`);
            return false;
        }
    }

    // S·ª≠a ph∆∞∆°ng th·ª©c t·∫°o d·ªØ li·ªáu nhi·ªát ƒë·ªô
    async _processReceivedData(topic, data) {
        console.log(`üì© Nh·∫≠n d·ªØ li·ªáu MQTT: Topic=${topic}, Data=${data}`);
        
        // Ph√¢n t√≠ch c·∫•u tr√∫c topic ƒë·ªÉ l·∫•y feedKey
        const topicParts = topic.split('/');
        // Ki·ªÉm tra xem topic c√≥ ƒë√∫ng ƒë·ªãnh d·∫°ng kh√¥ng (v√≠ d·ª•: username/feeds/feedKey)
        if (topicParts.length < 3) {
            console.log(`‚ùå Topic kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng: ${topic}`);
            return;
        }

        // feedKey th∆∞·ªùng l√† ph·∫ßn t·ª≠ cu·ªëi c√πng c·ªßa ƒë∆∞·ªùng d·∫´n topic
        const feedKey = topicParts[topicParts.length - 1];
        
        if (!feedKey || feedKey.trim() === '') {
            console.log(`‚ùå Kh√¥ng th·ªÉ x√°c ƒë·ªãnh feedKey t·ª´ topic: ${topic}`);
            return;
        }

        console.log(`üîç ƒê√£ x√°c ƒë·ªãnh feedKey: ${feedKey} t·ª´ topic: ${topic}`);
        
        (async () => {
            try {
                // T√¨m feed d·ª±a tr√™n feedKey ch√≠nh x√°c
                const feed = await prisma.feed.findFirst({
                    where: { feedKey: feedKey },
                    include: { iotdevice: true }
                });

                if (!feed) {
                    console.log(`‚ùå Kh√¥ng t√¨m th·∫•y feed v·ªõi feedKey: ${feedKey}`);
                    console.log(`üí° Ki·ªÉm tra database feed c√≥ t·ªìn t·∫°i feedKey n√†y kh√¥ng, ho·∫∑c c√≥ l·ªói ch√≠nh t·∫£ trong feedKey.`);
                    
                    // Th·ª≠ t√¨m feed g·∫ßn ƒë√∫ng ƒë·ªÉ g·ª£i √Ω
                    const allFeeds = await prisma.feed.findMany({
                        select: { feedKey: true }
                    });
                    console.log(`üìã Danh s√°ch t·∫•t c·∫£ feedKey hi·ªán c√≥: ${allFeeds.map(f => f.feedKey).join(', ')}`);
                    return;
                }

                if (!feed.iotdevice) {
                    console.log(`‚ùå Feed ${feedKey} kh√¥ng c√≥ thi·∫øt b·ªã li√™n k·∫øt`);
                    return;
                }

                console.log(`‚úÖ ƒê√£ t√¨m th·∫•y feed: ${feed.feedKey} thu·ªôc thi·∫øt b·ªã: ${feed.iotdevice.deviceCode} (ID: ${feed.iotdevice.id}, Lo·∫°i: ${feed.iotdevice.deviceType})`);
                const device = feed.iotdevice;

                // Ph√¢n t√≠ch gi√° tr·ªã v√† x·ª≠ l√Ω d·ªØ li·ªáu
                let parsedValue = parseFloat(data);
                if (isNaN(parsedValue)) {
                    console.log(`‚ö†Ô∏è Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu "${data}" th√†nh s·ªë`);
                    return;
                }

                console.log(`üìä Gi√° tr·ªã ƒë√£ ph√¢n t√≠ch: ${parsedValue}`);

                // C·∫≠p nh·∫≠t gi√° tr·ªã m·ªõi nh·∫•t cho feed
                try {
                    await prisma.feed.update({
                        where: { id: feed.id },
                        data: { lastValue: parsedValue }
                    });
                    console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t gi√° tr·ªã m·ªõi cho feed ${feed.feedKey}: ${parsedValue}`);

                    // C·∫≠p nh·∫≠t tr·∫°ng th√°i thi·∫øt b·ªã n·∫øu c·∫ßn
                    await this._updateDeviceStatus(device.id, feed.feedKey, parsedValue);
                } catch (error) {
                    console.error(`‚ùå L·ªói khi c·∫≠p nh·∫≠t gi√° tr·ªã feed: ${error.message}`);
                }

                // Ki·ªÉm tra ng∆∞·ª°ng v√† t·∫°o th√¥ng b√°o n·∫øu v∆∞·ª£t ng∆∞·ª°ng
                if (feed.maxValue !== null && parsedValue > feed.maxValue) {
                    await notificationService.createThresholdNotification(device, feed, parsedValue, true);
                } else if (feed.minValue !== null && parsedValue < feed.minValue) {
                    await notificationService.createThresholdNotification(device, feed, parsedValue, false);
                }

                // X·ª≠ l√Ω d·ªØ li·ªáu d·ª±a tr√™n lo·∫°i thi·∫øt b·ªã t·ª´ c∆° s·ªü d·ªØ li·ªáu
                console.log(`üìä X·ª≠ l√Ω d·ªØ li·ªáu cho thi·∫øt b·ªã lo·∫°i: ${device.deviceType}`);
                
                // L∆∞u d·ªØ li·ªáu d·ª±a v√†o deviceType t·ª´ database
                switch (device.deviceType) {
                    case 'soil_moisture':
                        console.log(`üìä ƒê√£ l∆∞u d·ªØ li·ªáu ƒë·ªô ·∫©m ƒë·∫•t: ${parsedValue}%`);
                        await prisma.soilmoisturedata.create({
                            data: {
                                deviceId: device.id,
                                moistureValue: parsedValue
                            }
                        });
                        
                        // WebSocket update
                        this.emitSensorUpdate({
                            deviceId: device.id,
                            type: 'soil_moisture',
                            data: {
                                soilMoisture: parsedValue,
                                timestamp: new Date().toISOString()
                            }
                        });
                        break;
                        
                    case 'temperature_humidity':
                        // X√°c ƒë·ªãnh ƒë√¢y l√† nhi·ªát ƒë·ªô hay ƒë·ªô ·∫©m d·ª±a v√†o t√™n feed
                        if (feed.name.toLowerCase().includes('nhiet') || 
                            feed.name.toLowerCase().includes('temp') || 
                            feedKey.includes('nhietdo') || 
                            feedKey.includes('temp')) {
                            
                            console.log(`üìä ƒê√£ l∆∞u d·ªØ li·ªáu nhi·ªát ƒë·ªô: ${parsedValue}¬∞C`);
                            
                            // T√¨m b·∫£n ghi g·∫ßn nh·∫•t ƒë·ªÉ c·∫≠p nh·∫≠t
                            const latestRecord = await prisma.temperaturehumiditydata.findFirst({
                                where: {
                                    deviceId: device.id,
                                    readingTime: {
                                        gte: new Date(Date.now() - 60000) // D·ªØ li·ªáu trong v√≤ng 60 gi√¢y
                                    }
                                },
                                orderBy: {
                                    readingTime: 'desc'
                                }
                            });
                            
                            if (latestRecord && latestRecord.humidity > 0) {
                                // C·∫≠p nh·∫≠t b·∫£n ghi hi·ªán c√≥ v·ªõi nhi·ªát ƒë·ªô m·ªõi
                                await prisma.temperaturehumiditydata.update({
                                    where: { id: latestRecord.id },
                                    data: { 
                                        temperature: parsedValue,
                                        readingTime: new Date()
                                    }
                                });
                                console.log(`üîÑ ƒê√£ c·∫≠p nh·∫≠t b·∫£n ghi ID ${latestRecord.id} v·ªõi nhi·ªát ƒë·ªô ${parsedValue}¬∞C v√† ƒë·ªô ·∫©m ${latestRecord.humidity}%`);
                            } else {
                                // T·∫°o b·∫£n ghi m·ªõi ch·ªâ v·ªõi nhi·ªát ƒë·ªô
                                await prisma.temperaturehumiditydata.create({
                                    data: {
                                        temperature: parsedValue,
                                        humidity: 0, // Set ƒë·ªô ·∫©m l√† 0 khi ch·ªâ c√≥ nhi·ªát ƒë·ªô
                                        deviceId: device.id // S·ª≠ d·ª•ng deviceId tr·ª±c ti·∫øp thay v√¨ device.connect
                                    }
                                });
                                console.log(`üìù ƒê√£ t·∫°o b·∫£n ghi m·ªõi ch·ªâ v·ªõi nhi·ªát ƒë·ªô ${parsedValue}¬∞C`);
                            }
                            
                            // WebSocket update
                            this.emitSensorUpdate({
                                deviceId: device.id,
                                type: 'temperature_humidity',
                                data: {
                                    temperature: parsedValue,
                                    timestamp: new Date().toISOString()
                                }
                            });
                        } else {
                            // ƒê√¢y l√† d·ªØ li·ªáu ƒë·ªô ·∫©m
                            console.log(`üìä ƒê√£ l∆∞u d·ªØ li·ªáu ƒë·ªô ·∫©m kh√¥ng kh√≠: ${parsedValue}%`);
                            
                            // T√¨m b·∫£n ghi g·∫ßn nh·∫•t ƒë·ªÉ c·∫≠p nh·∫≠t
                            const latestRecord = await prisma.temperaturehumiditydata.findFirst({
                                where: {
                                    deviceId: device.id,
                                    readingTime: {
                                        gte: new Date(Date.now() - 60000) // D·ªØ li·ªáu trong v√≤ng 60 gi√¢y
                                    }
                                },
                                orderBy: {
                                    readingTime: 'desc'
                                }
                            });
                            
                            if (latestRecord && latestRecord.temperature > 0) {
                                // C·∫≠p nh·∫≠t b·∫£n ghi hi·ªán c√≥ v·ªõi ƒë·ªô ·∫©m m·ªõi
                                await prisma.temperaturehumiditydata.update({
                                    where: { id: latestRecord.id },
                                    data: { 
                                        humidity: parsedValue,
                                        readingTime: new Date()
                                    }
                                });
                                console.log(`üîÑ ƒê√£ c·∫≠p nh·∫≠t b·∫£n ghi ID ${latestRecord.id} v·ªõi nhi·ªát ƒë·ªô ${latestRecord.temperature}¬∞C v√† ƒë·ªô ·∫©m ${parsedValue}%`);
                            } else {
                                // T·∫°o b·∫£n ghi m·ªõi ch·ªâ v·ªõi ƒë·ªô ·∫©m
                                await prisma.temperaturehumiditydata.create({
                                    data: {
                                        temperature: 0, // Set nhi·ªát ƒë·ªô l√† 0 khi ch·ªâ c√≥ ƒë·ªô ·∫©m
                                        humidity: parsedValue,
                                        deviceId: device.id // S·ª≠ d·ª•ng deviceId tr·ª±c ti·∫øp thay v√¨ device.connect
                                    }
                                });
                                console.log(`üìù ƒê√£ t·∫°o b·∫£n ghi m·ªõi ch·ªâ v·ªõi ƒë·ªô ·∫©m ${parsedValue}%`);
                            }
                            
                            // WebSocket update
                            this.emitSensorUpdate({
                                deviceId: device.id,
                                type: 'temperature_humidity',
                                data: {
                                    humidity: parsedValue,
                                    timestamp: new Date().toISOString()
                                }
                            });
                        }
                        break;
                        
                    case 'pump_water':
                        console.log(`üìä ƒê√£ l∆∞u d·ªØ li·ªáu m√°y b∆°m: ${parsedValue}%`);
                        // X√°c ƒë·ªãnh tr·∫°ng th√°i d·ª±a tr√™n t·ªëc ƒë·ªô
                        const pumpStatus = parsedValue > 0 ? 'On' : 'Off';
                        
                        // Lu√¥n l∆∞u d·ªØ li·ªáu v√†o PumpWaterData
                        await prisma.pumpwaterdata.create({
                            data: {
                                deviceId: device.id,
                                pumpSpeed: parsedValue,
                                status: pumpStatus
                            }
                        });
                        
                        // C·∫≠p nh·∫≠t tr·∫°ng th√°i thi·∫øt b·ªã khi nh·∫≠n d·ªØ li·ªáu m√°y b∆°m
                        await prisma.iotdevice.update({
                            where: { id: device.id },
                            data: {
                                status: pumpStatus, // C·∫≠p nh·∫≠t tr·∫°ng th√°i thi·∫øt b·ªã theo m√°y b∆°m
                                isOnline: true,
                                lastSeen: new Date(),
                                lastSeenAt: new Date()
                            }
                        });
                        
                        // WebSocket update
                        this.emitSensorUpdate({
                            deviceId: device.id,
                            type: 'pump_status',
                            data: {
                                status: pumpStatus,
                                pumpSpeed: parsedValue,
                                timestamp: new Date().toISOString()
                            }
                        });
                        break;
                        
                    case 'light':
                        console.log(`üìä ƒê√£ l∆∞u d·ªØ li·ªáu ƒë√®n: ${parsedValue}`);
                        // V·ªõi ƒë√®n, ch√∫ng ta l∆∞u tr·∫°ng th√°i On/Off
                        // M·ªü r·ªông ƒëi·ªÅu ki·ªán ki·ªÉm tra ƒë·ªÉ ƒë√®n c√≥ th·ªÉ nh·∫≠n nhi·ªÅu lo·∫°i gi√° tr·ªã kh√°c nhau
                        const lightStatus = parsedValue === 1 || 
                                          parsedValue === '1' || 
                                          parsedValue === 'On' || 
                                          parsedValue === 'on' || 
                                          parsedValue === 'true' || 
                                          parsedValue === 'yes' || 
                                          parsedValue > 0
                                          ? 'On' : 'Off';
                        
                        console.log(`üîç Light value: "${data}" parsed to: ${parsedValue}, status: ${lightStatus}`);
                        
                        // L∆∞u d·ªØ li·ªáu ƒë√®n
                        await prisma.lightdata.create({
                            data: {
                                deviceId: device.id,
                                status: lightStatus,
                                readingTime: new Date()
                            }
                        });

                        // C·∫≠p nh·∫≠t tr·∫°ng th√°i thi·∫øt b·ªã
                        await prisma.iotdevice.update({
                            where: { id: device.id },
                            data: {
                                status: lightStatus,
                                isOnline: true,
                                lastSeen: new Date(),
                                lastSeenAt: new Date()
                            }
                        });

                        // WebSocket update
                        this.emitSensorUpdate({
                            deviceId: device.id,
                            type: 'light',
                            data: {
                                status: lightStatus,
                                timestamp: new Date().toISOString()
                            }
                        });
                        break;
                        
                    default:
                        console.log(`‚ö†Ô∏è Lo·∫°i thi·∫øt b·ªã kh√¥ng x√°c ƒë·ªãnh: ${device.deviceType}`);
                }

                console.log(`‚úÖ Ho√†n t·∫•t x·ª≠ l√Ω d·ªØ li·ªáu cho feed ${feedKey}`);
                return true;
            } catch (error) {
                console.error(`‚ùå L·ªói x·ª≠ l√Ω d·ªØ li·ªáu cho topic ${topic}:`, error);
                return false;
            }
        })();
    }

    // T·∫°o v√† l·∫•y client MQTT cho thi·∫øt b·ªã c·ª• th·ªÉ
    async createDeviceConnection(deviceId) {
        try {
            // Ki·ªÉm tra xem k·∫øt n·ªëi ƒë√£ t·ªìn t·∫°i ch∆∞a
            if (this.deviceMQTTClients.has(deviceId)) {
                return this.deviceMQTTClients.get(deviceId);
            }

            // L·∫•y th√¥ng tin thi·∫øt b·ªã t·ª´ database
            const device = await prisma.iotdevice.findUnique({
                where: { id: deviceId },
                select: {
                    id: true,
                    deviceCode: true,
                    mqttUsername: true,
                    mqttApiKey: true
                }
            });

            // N·∫øu thi·∫øt b·ªã kh√¥ng t·ªìn t·∫°i, kh√¥ng t·∫°o k·∫øt n·ªëi
            if (!device) {
                console.warn(`‚ö†Ô∏è Thi·∫øt b·ªã ${deviceId} kh√¥ng t·ªìn t·∫°i, kh√¥ng t·∫°o k·∫øt n·ªëi MQTT`);
                return null;
            }

            // N·∫øu thi·∫øt b·ªã kh√¥ng c√≥ th√¥ng tin MQTT, kh√¥ng t·∫°o k·∫øt n·ªëi
            if (!device.mqttUsername || !device.mqttApiKey) {
                console.warn(`‚ö†Ô∏è Thi·∫øt b·ªã ${deviceId} kh√¥ng c√≥ th√¥ng tin MQTT, kh√¥ng t·∫°o k·∫øt n·ªëi`);
                return null;
            }

            console.log(`üîå ƒêang t·∫°o k·∫øt n·ªëi MQTT cho thi·∫øt b·ªã ${deviceId} v·ªõi username ${device.mqttUsername}`);

            // T·∫°o k·∫øt n·ªëi MQTT cho thi·∫øt b·ªã
            const deviceClient = mqtt.connect(`mqtt://${device.mqttUsername}:${device.mqttApiKey}@${this.broker}`, {
                clientId: `device_${deviceId}_${Math.random().toString(16).substring(2, 8)}`,
                clean: true,
                connectTimeout: 30000,
                reconnectPeriod: 5000,
                keepalive: 60,
                port: 1883
            });

            // Thi·∫øt l·∫≠p event handlers cho device client
            deviceClient.on('connect', () => {
                console.log(`‚úÖ ƒê√£ k·∫øt n·ªëi MQTT th√†nh c√¥ng cho thi·∫øt b·ªã ${deviceId}`);
            });

            deviceClient.on('error', (err) => {
                console.error(`‚ùå L·ªói k·∫øt n·ªëi MQTT cho thi·∫øt b·ªã ${deviceId}:`, err.message);
            });

            deviceClient.on('message', async (topic, message) => {
                try {
                    console.log(`üì© Thi·∫øt b·ªã ${deviceId} nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn t·ª´ topic ${topic}: ${message.toString()}`);
                    // X·ª≠ l√Ω tin nh·∫Øn t∆∞∆°ng t·ª± nh∆∞ client m·∫∑c ƒë·ªãnh
                    await this._processReceivedData(topic, message.toString());
                } catch (error) {
                    console.error(`‚ùå L·ªói x·ª≠ l√Ω tin nh·∫Øn MQTT cho thi·∫øt b·ªã ${deviceId}:`, error);
                }
            });

            // L∆∞u k·∫øt n·ªëi v√†o Map
            this.deviceMQTTClients.set(deviceId, {
                client: deviceClient,
                username: device.mqttUsername,
                isConnected: true
            });

            return this.deviceMQTTClients.get(deviceId);
        } catch (error) {
            console.error(`‚ùå L·ªói t·∫°o k·∫øt n·ªëi MQTT cho thi·∫øt b·ªã ${deviceId}:`, error);
            return null;
        }
    }

    // L·∫•y MQTT client cho thi·∫øt b·ªã
    async getMQTTClientForDevice(device) {
        try {
            // Ki·ªÉm tra xem thi·∫øt b·ªã c√≥ th√¥ng tin MQTT ri√™ng kh√¥ng
            if (device.mqttUsername && device.mqttApiKey) {
                // Ki·ªÉm tra xem thi·∫øt b·ªã ƒë√£ c√≥ k·∫øt n·ªëi ch∆∞a
                if (this.deviceMQTTClients.has(device.id)) {
                    return this.deviceMQTTClients.get(device.id);
                }

                // N·∫øu ch∆∞a c√≥, t·∫°o k·∫øt n·ªëi m·ªõi
                return await this.createDeviceConnection(device.id);
            }

            // N·∫øu thi·∫øt b·ªã kh√¥ng c√≥ th√¥ng tin MQTT ri√™ng, s·ª≠ d·ª•ng k·∫øt n·ªëi m·∫∑c ƒë·ªãnh
            return {
                client: this.client,
                username: this.username,
                isConnected: this.isConnected
            };
        } catch (error) {
            console.error(`‚ùå L·ªói l·∫•y MQTT client cho thi·∫øt b·ªã ${device.id}:`, error);
            return {
                client: this.client,
                username: this.username,
                isConnected: this.isConnected
            };
        }
    }

    // C·∫≠p nh·∫≠t ph∆∞∆°ng th·ª©c connectDevice ƒë·ªÉ s·ª≠ d·ª•ng k·∫øt n·ªëi MQTT c·ªßa thi·∫øt b·ªã
    async connectDevice(device) {
        try {
            console.log(`ƒêang k·∫øt n·ªëi thi·∫øt b·ªã ${device.deviceCode} v·ªõi MQTT`);

            // L·∫•y MQTT client c·ªßa thi·∫øt b·ªã
            let mqttConnection = await this.getMQTTClientForDevice(device);
            
            if (!mqttConnection || !mqttConnection.isConnected) {
                console.warn(`‚ö†Ô∏è MQTT ch∆∞a k·∫øt n·ªëi cho thi·∫øt b·ªã ${device.deviceCode}, s·ª≠ d·ª•ng k·∫øt n·ªëi m·∫∑c ƒë·ªãnh`);
                // Fallback to default connection
                mqttConnection = {
                    client: this.client,
                    username: this.username,
                    isConnected: this.isConnected
                };
            }

            if (!mqttConnection.isConnected) {
                console.warn(`‚ö†Ô∏è MQTT ch∆∞a k·∫øt n·ªëi, kh√¥ng th·ªÉ k·∫øt n·ªëi thi·∫øt b·ªã ${device.deviceCode}`);
                return false;
            }

            // X√°c ƒë·ªãnh c√°c topics c·∫ßn ƒëƒÉng k√Ω
            const topics = [];

            // T·∫£i l·∫°i th√¥ng tin feeds c·ªßa thi·∫øt b·ªã ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ d·ªØ li·ªáu m·ªõi nh·∫•t
            const deviceWithFeeds = await prisma.iotdevice.findUnique({
                where: { id: device.id },
                include: { feed: true }
            });

            if (!deviceWithFeeds || !deviceWithFeeds.feed || deviceWithFeeds.feed.length === 0) {
                console.warn(`‚ö†Ô∏è Thi·∫øt b·ªã ${device.deviceCode} kh√¥ng c√≥ feeds, kh√¥ng th·ªÉ k·∫øt n·ªëi MQTT`);
                return false;
            }

            // ƒêƒÉng k√Ω c√°c topics d·ª±a tr√™n feedKey c·ªßa thi·∫øt b·ªã
            for (const feed of deviceWithFeeds.feed) {
                if (feed.feedKey) {
                    const topic = `${mqttConnection.username}/feeds/${feed.feedKey}`;
                    topics.push(topic);
                }
            }

            // N·∫øu kh√¥ng c√≥ topics n√†o ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a
            if (topics.length === 0) {
                console.warn(`‚ö†Ô∏è Kh√¥ng c√≥ topics n√†o ƒë∆∞·ª£c x√°c ƒë·ªãnh cho thi·∫øt b·ªã ${device.deviceCode}`);
                return false;
            }

            // ƒêƒÉng k√Ω c√°c topics
            for (const topic of topics) {
                mqttConnection.client.subscribe(topic, (err) => {
                    if (err) {
                        console.error(`‚ùå L·ªói ƒëƒÉng k√Ω topic ${topic}:`, err);
                    } else {
                        console.log(`‚úÖ ƒê√£ ƒëƒÉng k√Ω topic ${topic} cho thi·∫øt b·ªã ${device.deviceCode}`);
                    }
                });
            }

            // C·∫≠p nh·∫≠t tr·∫°ng th√°i thi·∫øt b·ªã
            await prisma.iotdevice.update({
                where: { id: device.id },
                data: {
                    status: 'On',
                    isOnline: true,
                    lastSeen: new Date(),
                    lastSeenAt: new Date()
                }
            });

            // T·∫°o th√¥ng b√°o k·∫øt n·ªëi th√†nh c√¥ng
            await notificationService.createConnectionNotification(device, true);

            // L∆∞u th√¥ng tin k·∫øt n·ªëi
            this.deviceConnections.set(device.id, {
                deviceCode: device.deviceCode,
                deviceType: device.deviceType,
                topics: topics
            });

            console.log(`‚úÖ ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng thi·∫øt b·ªã ${device.deviceCode}`);
            return true;
        } catch (error) {
            console.error(`‚ùå L·ªói k·∫øt n·ªëi thi·∫øt b·ªã ${device.deviceCode}:`, error);
            return false;
        }
    }

    // Th√™m ph∆∞∆°ng th·ª©c ƒëƒÉng k√Ω nh·∫≠n d·ªØ li·ªáu t·ª´ t·∫•t c·∫£ feeds
    async subscribeToAllFeeds() {
        if (!this.checkConnection()) {
            console.error('‚ùå MQTT ch∆∞a k·∫øt n·ªëi, kh√¥ng th·ªÉ ƒëƒÉng k√Ω feeds');
            return false;
        }

        try {
            console.log('üîÑ ƒêang ƒëƒÉng k√Ω t·∫•t c·∫£ feeds cho MQTT t·ª´ database...');
            
            // ƒêƒÉng k√Ω c√°c feed trong database cho k·∫øt n·ªëi m·∫∑c ƒë·ªãnh
            const feeds = await prisma.feed.findMany({
                include: {
                    iotdevice: {
                        select: {
                            deviceCode: true,
                            deviceType: true
                        }
                    }
                }
            });
            
            console.log(`üîç T√¨m th·∫•y ${feeds.length} feed trong database`);
            
            if (feeds.length === 0) {
                console.warn('‚ö†Ô∏è Kh√¥ng c√≥ feed n√†o trong database!');
                return true;
            }
            
            // ƒêƒÉng k√Ω feed trong k·∫øt n·ªëi m·∫∑c ƒë·ªãnh
            for (const feed of feeds) {
                const topic = `${this.username}/feeds/${feed.feedKey}`;
                this.client.subscribe(topic, (err) => {
                    if (err) {
                        console.error(`‚ùå L·ªói ƒëƒÉng k√Ω topic ${topic}:`, err);
                    } else {
                        console.log(`‚úÖ ƒê√£ ƒëƒÉng k√Ω topic ${topic} cho thi·∫øt b·ªã ${feed.iotdevice?.deviceCode || 'unknown'}`);
                    }
                });
            }
            
            console.log('‚úÖ ƒê√£ ƒëƒÉng k√Ω t·∫•t c·∫£ feeds t·ª´ database th√†nh c√¥ng');
            return true;
        } catch (error) {
            console.error('‚ùå L·ªói khi ƒëƒÉng k√Ω feeds:', error);
            return false;
        }
    }

    // Th√™m ph∆∞∆°ng th·ª©c ƒëƒÉng k√Ω c√°c topics m·∫∑c ƒë·ªãnh
    async _subscribeToDefaultTopics() {
        try {
            // L·∫•y t·∫•t c·∫£ c√°c feed t·ª´ database
            const feeds = await prisma.feed.findMany();
            
            console.log(`üîç T√¨m th·∫•y ${feeds.length} feed trong database ƒë·ªÉ ƒëƒÉng k√Ω`);
            
            if (feeds.length === 0) {
                console.log('‚ö†Ô∏è Kh√¥ng c√≥ feed n√†o trong database');
                return;
            }
            
            // ƒêƒÉng k√Ω t·∫•t c·∫£ c√°c feed trong database
            for (const feed of feeds) {
                const topic = `${this.username}/feeds/${feed.feedKey}`;
                this.client.subscribe(topic, (err) => {
                    if (err) {
                        console.error(`‚ùå L·ªói ƒëƒÉng k√Ω topic ${topic}:`, err);
                    } else {
                        console.log(`‚úÖ ƒê√£ ƒëƒÉng k√Ω topic ${topic} cho feed ${feed.name || feed.feedKey}`);
                    }
                });
            }
            
            console.log('‚úÖ ƒê√£ ƒëƒÉng k√Ω t·∫•t c·∫£ feed t·ª´ database th√†nh c√¥ng');
        } catch (error) {
            console.error('‚ùå L·ªói khi ƒëƒÉng k√Ω topics m·∫∑c ƒë·ªãnh:', error);
        }
    }
    
    // Th√™m ph∆∞∆°ng th·ª©c ƒëƒÉng k√Ω feed m·ªõi khi thi·∫øt b·ªã ƒë∆∞·ª£c th√™m v√†o
    async registerDeviceFeed(device) {
        if (!this.checkConnection()) {
            console.error('‚ùå MQTT ch∆∞a k·∫øt n·ªëi, kh√¥ng th·ªÉ ƒëƒÉng k√Ω feed m·ªõi');
            return false;
        }

        try {
            if (!device) {
                console.error('‚ùå Thi·∫øt b·ªã kh√¥ng h·ª£p l·ªá');
                return false;
            }

            console.log(`üîÑ ƒêang ƒëƒÉng k√Ω feed cho thi·∫øt b·ªã: ${device.deviceCode}`);
            
            // L·∫•y feed c·ªßa thi·∫øt b·ªã t·ª´ database
            const deviceWithFeed = await prisma.iotdevice.findUnique({
                where: { id: device.id },
                include: { feed: true }
            });
            
            if (!deviceWithFeed || !deviceWithFeed.feed) {
                console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y feed cho thi·∫øt b·ªã ${device.deviceCode}`);
                return false;
            }
            
            // ƒêƒÉng k√Ω t·∫•t c·∫£ feed c·ªßa thi·∫øt b·ªã
            for (const feed of deviceWithFeed.feed) {
                const topic = `${this.username}/feeds/${feed.feedKey}`;
                this.client.subscribe(topic, (err) => {
                    if (err) {
                        console.error(`‚ùå L·ªói ƒëƒÉng k√Ω topic ${topic}:`, err);
                    } else {
                        console.log(`‚úÖ ƒê√£ ƒëƒÉng k√Ω topic ${topic} cho thi·∫øt b·ªã ${device.deviceCode}`);
                    }
                });
            }

            return true;
        } catch (error) {
            console.error(`‚ùå L·ªói khi ƒëƒÉng k√Ω feed m·ªõi cho thi·∫øt b·ªã ${device?.deviceCode}:`, error);
            return false;
        }
    }

    // Ph∆∞∆°ng th·ª©c ƒë·ªÉ g·ª≠i d·ªØ li·ªáu l√™n MQTT cho thi·∫øt b·ªã c·ª• th·ªÉ
    async publishToMQTT(deviceId, feedKey, value) {
        try {
            // L·∫•y th√¥ng tin thi·∫øt b·ªã t·ª´ database
            const device = await prisma.iotdevice.findUnique({
                where: { id: deviceId }
            });

            if (!device) {
                console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã ${deviceId}`);
                return false;
            }

            // L·∫•y MQTT client d·ª±a tr√™n th√¥ng tin thi·∫øt b·ªã
            const mqttConnection = await this.getMQTTClientForDevice(device);
            
            if (!mqttConnection || !mqttConnection.isConnected) {
                console.warn(`‚ö†Ô∏è MQTT ch∆∞a k·∫øt n·ªëi cho thi·∫øt b·ªã ${deviceId}, s·ª≠ d·ª•ng k·∫øt n·ªëi m·∫∑c ƒë·ªãnh`);
                // S·ª≠ d·ª•ng k·∫øt n·ªëi m·∫∑c ƒë·ªãnh
                const topic = `${this.username}/feeds/${feedKey}`;
                console.log(`üì§ G·ª≠i d·ªØ li·ªáu ƒë·∫øn ${topic}: ${value}`);
                
                this.client.publish(topic, value.toString(), { qos: 1 }, (err) => {
                    if (err) {
                        console.error(`‚ùå L·ªói g·ª≠i d·ªØ li·ªáu ƒë·∫øn ${topic}:`, err);
                        return false;
                    } else {
                        console.log(`‚úÖ ƒê√£ g·ª≠i d·ªØ li·ªáu th√†nh c√¥ng ƒë·∫øn ${topic}`);
                        return true;
                    }
                });
                
                return true;
            }

            // T·∫°o topic v√† g·ª≠i d·ªØ li·ªáu b·∫±ng k·∫øt n·ªëi c·ªßa thi·∫øt b·ªã
            const topic = `${mqttConnection.username}/feeds/${feedKey}`;
            console.log(`üì§ G·ª≠i d·ªØ li·ªáu ƒë·∫øn ${topic}: ${value}`);
            
            mqttConnection.client.publish(topic, value.toString(), { qos: 1 }, (err) => {
                if (err) {
                    console.error(`‚ùå L·ªói g·ª≠i d·ªØ li·ªáu ƒë·∫øn ${topic}:`, err);
                    return false;
                } else {
                    console.log(`‚úÖ ƒê√£ g·ª≠i d·ªØ li·ªáu th√†nh c√¥ng ƒë·∫øn ${topic}`);
                    return true;
                }
            });
            
            return true;
        } catch (error) {
            console.error(`‚ùå L·ªói g·ª≠i d·ªØ li·ªáu MQTT cho thi·∫øt b·ªã ${deviceId}:`, error);
            return false;
        }
    }

    // Th√™m ph∆∞∆°ng th·ª©c ƒë·ªÉ ng·∫Øt k·∫øt n·ªëi m·ªôt thi·∫øt b·ªã c·ª• th·ªÉ
    async disconnectDevice(deviceId) {
        try {
            console.log(`ƒêang ng·∫Øt k·∫øt n·ªëi thi·∫øt b·ªã v·ªõi ID ${deviceId}`);
            
            // L·∫•y th√¥ng tin thi·∫øt b·ªã
            const device = await prisma.iotdevice.findUnique({
                where: { id: deviceId },
                include: { feed: true }
            });

            if (!device) {
                console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã v·ªõi ID ${deviceId}`);
                return false;
            }

            // H·ªßy ƒëƒÉng k√Ω c√°c topics c·ªßa thi·∫øt b·ªã
            const connection = this.deviceConnections.get(deviceId);
            if (connection && connection.topics) {
                const mqttConnection = await this.getMQTTClientForDevice(device);
                
                for (const topic of connection.topics) {
                    mqttConnection.client.unsubscribe(topic, (err) => {
                        if (err) {
                            console.error(`‚ùå L·ªói h·ªßy ƒëƒÉng k√Ω topic ${topic}:`, err);
                        } else {
                            console.log(`‚úÖ ƒê√£ h·ªßy ƒëƒÉng k√Ω topic ${topic} cho thi·∫øt b·ªã ${device.deviceCode}`);
                        }
                    });
                }
            }

            // N·∫øu thi·∫øt b·ªã c√≥ client MQTT ri√™ng, ƒë√≥ng k·∫øt n·ªëi
            if (this.deviceMQTTClients.has(deviceId)) {
                const deviceClient = this.deviceMQTTClients.get(deviceId);
                if (deviceClient && deviceClient.client) {
                    deviceClient.client.end(true);
                    console.log(`‚úÖ ƒê√£ ƒë√≥ng k·∫øt n·ªëi MQTT cho thi·∫øt b·ªã ${device.deviceCode}`);
                }
                this.deviceMQTTClients.delete(deviceId);
            }

            // X√≥a th√¥ng tin k·∫øt n·ªëi
            this.deviceConnections.delete(deviceId);

            // C·∫≠p nh·∫≠t tr·∫°ng th√°i thi·∫øt b·ªã
            await prisma.iotdevice.update({
                where: { id: deviceId },
                data: {
                    status: 'Off',
                    isOnline: false,
                    lastSeen: new Date(),
                    lastSeenAt: new Date()
                }
            });

            console.log(`‚úÖ ƒê√£ ng·∫Øt k·∫øt n·ªëi th√†nh c√¥ng thi·∫øt b·ªã ${device.deviceCode}`);
            return true;
        } catch (error) {
            console.error(`‚ùå L·ªói ng·∫Øt k·∫øt n·ªëi thi·∫øt b·ªã ${deviceId}:`, error);
            return false;
        }
    }

    // Th√™m ph∆∞∆°ng th·ª©c ƒë·ªÉ ƒë√≥ng t·∫•t c·∫£ k·∫øt n·ªëi
    async closeAllConnections() {
        try {
            console.log('ƒê√≥ng t·∫•t c·∫£ k·∫øt n·ªëi MQTT...');
            
            // ƒê√≥ng k·∫øt n·ªëi m·∫∑c ƒë·ªãnh
            if (this.client) {
                this.client.end(true);
                console.log('ƒê√£ ƒë√≥ng k·∫øt n·ªëi MQTT m·∫∑c ƒë·ªãnh');
            }
            
            // ƒê√≥ng t·∫•t c·∫£ k·∫øt n·ªëi c·ªßa thi·∫øt b·ªã
            for (const [deviceId, connection] of this.deviceMQTTClients.entries()) {
                if (connection.client) {
                    connection.client.end(true);
                    console.log(`ƒê√£ ƒë√≥ng k·∫øt n·ªëi MQTT cho thi·∫øt b·ªã ${deviceId}`);
                }
            }
            
            // X√≥a t·∫•t c·∫£ k·∫øt n·ªëi
            this.deviceMQTTClients.clear();
            this.deviceConnections.clear();
            this.isConnected = false;
            
            console.log('‚úÖ ƒê√£ ƒë√≥ng t·∫•t c·∫£ k·∫øt n·ªëi MQTT th√†nh c√¥ng');
            return true;
        } catch (error) {
            console.error('L·ªói khi ƒë√≥ng k·∫øt n·ªëi MQTT:', error);
            return false;
        }
    }

    // Th√™m ph∆∞∆°ng th·ª©c waitForConnection n·∫øu Server.js c·∫ßn
    async waitForConnection(timeout = 15000) {
        return new Promise((resolve) => {
            if (this.checkConnection()) {
                resolve(true);
                return;
            }

            const connectHandler = () => {
                resolve(true);
            };

            this.client.once('connect', connectHandler);

            setTimeout(() => {
                this.client.removeListener('connect', connectHandler);
                resolve(this.checkConnection());
            }, timeout);
        });
    }
}

// T·∫°o v√† xu·∫•t instance duy nh·∫•t
const mqttService = new MQTTService();
module.exports = mqttService;