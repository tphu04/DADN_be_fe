const prisma = require('../../config/database');

/**
 * Service x·ª≠ l√Ω c√°c th√¥ng b√°o trong h·ªá th·ªëng
 */
class NotificationService {
    constructor() {
        this.io = null; // ƒê·ªëi t∆∞·ª£ng Socket.IO ƒë·ªÉ g·ª≠i th√¥ng b√°o real-time
    }

    /**
     * Thi·∫øt l·∫≠p Socket.IO ƒë·ªÉ g·ª≠i th√¥ng b√°o real-time
     * @param {Object} io - ƒê·ªëi t∆∞·ª£ng Socket.IO
     */
    setSocketIO(io) {
        this.io = io;
        console.log('‚úÖ ƒê√£ thi·∫øt l·∫≠p Socket.IO cho Notification Service');
    }

    /**
     * T·∫°o th√¥ng b√°o m·ªõi
     * @param {Object} notification - Th√¥ng tin th√¥ng b√°o
     * @returns {Promise<Object>} - Th√¥ng b√°o ƒë√£ t·∫°o
     */
    async createNotification(notification) {
        try {
            // T·∫°o th√¥ng b√°o m·ªõi trong database
            const newNotification = await prisma.notification.create({
                data: {
                    message: notification.message,
                    type: notification.type,
                    source: notification.source || null,
                    value: notification.value ? String(notification.value) : null,
                    deviceId: notification.deviceId,
                    timestamp: new Date()
                }
            });

            // G·ª≠i th√¥ng b√°o qua Socket.IO n·∫øu ƒë√£ thi·∫øt l·∫≠p
            if (this.io) {
                this.io.emit('new-notification', newNotification);
            }

            console.log(`üì¢ ƒê√£ t·∫°o th√¥ng b√°o: ${notification.message}`);
            return newNotification;
        } catch (error) {
            console.error('L·ªói khi t·∫°o th√¥ng b√°o:', error);
            throw error;
        }
    }

    /**
     * T·∫°o th√¥ng b√°o v·ªÅ ng∆∞·ª°ng gi√° tr·ªã
     * @param {Object} device - Th√¥ng tin thi·∫øt b·ªã
     * @param {Object} feed - Th√¥ng tin feed
     * @param {number} value - Gi√° tr·ªã hi·ªán t·∫°i
     * @param {boolean} isOverMax - C√≥ v∆∞·ª£t qu√° ng∆∞·ª°ng t·ªëi ƒëa kh√¥ng
     * @returns {Promise<Object>} - Th√¥ng b√°o ƒë√£ t·∫°o
     */
    async createThresholdNotification(device, feed, value, isOverMax) {
        const threshold = isOverMax ? feed.maxValue : feed.minValue;
        const message = `${device.deviceCode}: Gi√° tr·ªã ${feed.name} (${value}) ${isOverMax ? 'v∆∞·ª£t qu√° ng∆∞·ª°ng t·ªëi ƒëa' : 'd∆∞·ªõi ng∆∞·ª°ng t·ªëi thi·ªÉu'} (${threshold})`;
        
        return this.createNotification({
            message,
            type: 'THRESHOLD',
            source: device.deviceCode,
            deviceId: device.id,
            value: String(value)
        });
    }

    /**
     * T·∫°o th√¥ng b√°o v·ªÅ k·∫øt n·ªëi thi·∫øt b·ªã
     * @param {Object} device - Th√¥ng tin thi·∫øt b·ªã
     * @param {boolean} isConnected - Thi·∫øt b·ªã ƒë√£ k·∫øt n·ªëi hay ng·∫Øt k·∫øt n·ªëi
     * @returns {Promise<Object>} - Th√¥ng b√°o ƒë√£ t·∫°o
     */
    async createConnectionNotification(device, isConnected) {
        const message = `Thi·∫øt b·ªã ${device.deviceCode} ƒë√£ ${isConnected ? 'k·∫øt n·ªëi th√†nh c√¥ng' : 'ng·∫Øt k·∫øt n·ªëi'}`;
        
        return this.createNotification({
            message,
            type: 'CONNECTION',
            source: device.deviceCode,
            deviceId: device.id,
            value: isConnected ? 'connected' : 'disconnected'
        });
    }

    /**
     * T·∫°o th√¥ng b√°o v·ªÅ m√°y b∆°m
     * @param {Object} device - Th√¥ng tin thi·∫øt b·ªã
     * @param {boolean} isOn - M√°y b∆°m ƒë√£ b·∫≠t hay t·∫Øt
     * @param {number} speed - T·ªëc ƒë·ªô m√°y b∆°m (n·∫øu ƒëang b·∫≠t)
     * @returns {Promise<Object>} - Th√¥ng b√°o ƒë√£ t·∫°o
     */
    async createPumpNotification(device, isOn, speed = 0) {
        const message = `M√°y b∆°m ${device.deviceCode} ƒë√£ ƒë∆∞·ª£c ${isOn ? `B·∫¨T v·ªõi t·ªëc ƒë·ªô ${speed}%` : 'T·∫ÆT'}`;
        
        return this.createNotification({
            message,
            type: 'PUMP',
            source: device.deviceCode,
            deviceId: device.id,
            value: isOn ? String(speed) : '0'
        });
    }

    /**
     * T·∫°o th√¥ng b√°o c·∫≠p nh·∫≠t thi·∫øt b·ªã
     * @param {Object} device - Th√¥ng tin thi·∫øt b·ªã
     * @param {Object} changes - C√°c thay ƒë·ªïi ƒë√£ th·ª±c hi·ªán
     * @returns {Promise<Object>} - Th√¥ng b√°o ƒë√£ t·∫°o
     */
    async createUpdateNotification(device, changes) {
        // T·∫°o chu·ªói m√¥ t·∫£ c√°c thay ƒë·ªïi
        const changesText = Object.entries(changes)
            .map(([key, value]) => `${key}: ${value}`)
            .join(', ');
        
        const message = `Thi·∫øt b·ªã ${device.deviceCode} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t: ${changesText}`;
        
        return this.createNotification({
            message,
            type: 'UPDATE',
            source: device.deviceCode,
            deviceId: device.id,
            value: JSON.stringify(changes)
        });
    }

    /**
     * T·∫°o th√¥ng b√°o test
     * @param {Object} device - Th√¥ng tin thi·∫øt b·ªã
     * @param {string} message - N·ªôi dung th√¥ng b√°o
     * @param {string} value - Gi√° tr·ªã t√πy ch·ªânh
     * @returns {Promise<Object>} - Th√¥ng b√°o ƒë√£ t·∫°o
     */
    async createTestNotification(device, message, value = null) {
        return this.createNotification({
            message,
            type: 'TEST',
            source: device.deviceCode,
            deviceId: device.id,
            value
        });
    }

    /**
     * L·∫•y danh s√°ch th√¥ng b√°o m·ªõi nh·∫•t
     * @param {number} limit - S·ªë l∆∞·ª£ng th√¥ng b√°o t·ªëi ƒëa
     * @returns {Promise<Array>} - Danh s√°ch th√¥ng b√°o
     */
    async getLatestNotifications(limit = 20) {
        try {
            return await prisma.notification.findMany({
                take: limit,
                orderBy: { timestamp: 'desc' },
                include: { device: true }
            });
        } catch (error) {
            console.error('L·ªói khi l·∫•y danh s√°ch th√¥ng b√°o:', error);
            throw error;
        }
    }

    /**
     * ƒê√°nh d·∫•u th√¥ng b√°o l√† ƒë√£ ƒë·ªçc
     * @param {number} id - ID c·ªßa th√¥ng b√°o
     * @returns {Promise<Object>} - Th√¥ng b√°o ƒë√£ c·∫≠p nh·∫≠t
     */
    async markAsRead(id) {
        try {
            return await prisma.notification.update({
                where: { id },
                data: { isRead: true }
            });
        } catch (error) {
            console.error(`L·ªói khi ƒë√°nh d·∫•u th√¥ng b√°o ${id} l√† ƒë√£ ƒë·ªçc:`, error);
            throw error;
        }
    }

    /**
     * ƒê√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o l√† ƒë√£ ƒë·ªçc
     * @returns {Promise<Object>} - S·ªë l∆∞·ª£ng th√¥ng b√°o ƒë√£ c·∫≠p nh·∫≠t
     */
    async markAllAsRead() {
        try {
            return await prisma.notification.updateMany({
                where: { isRead: false },
                data: { isRead: true }
            });
        } catch (error) {
            console.error('L·ªói khi ƒë√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o l√† ƒë√£ ƒë·ªçc:', error);
            throw error;
        }
    }

    /**
     * L·∫•y s·ªë l∆∞·ª£ng th√¥ng b√°o ch∆∞a ƒë·ªçc
     * @returns {Promise<number>} - S·ªë l∆∞·ª£ng th√¥ng b√°o ch∆∞a ƒë·ªçc
     */
    async getUnreadCount() {
        try {
            return await prisma.notification.count({
                where: { isRead: false }
            });
        } catch (error) {
            console.error('L·ªói khi l·∫•y s·ªë l∆∞·ª£ng th√¥ng b√°o ch∆∞a ƒë·ªçc:', error);
            throw error;
        }
    }
}

// T·∫°o v√† xu·∫•t instance duy nh·∫•t
const notificationService = new NotificationService();
module.exports = notificationService;
