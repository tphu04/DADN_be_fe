const prisma = require('../../config/database');

/**
 * Service x·ª≠ l√Ω c√°c th√¥ng b√°o trong h·ªá th·ªëng
 */
class NotificationService {
    constructor() {
        this.io = null; // ƒê·ªëi t∆∞·ª£ng Socket.IO ƒë·ªÉ g·ª≠i th√¥ng b√°o real-time
    }

    /**
     * Thi·∫øt l·∫≠p Socket.IO ƒë·ªÉ g·ª≠i th√¥ng b√°o real-time
     * @param {Object} io - ƒê·ªëi t∆∞·ª£ng Socket.IO
     */
    setSocketIO(io) {
        this.io = io;
        console.log('‚úÖ ƒê√£ thi·∫øt l·∫≠p Socket.IO cho Notification Service');
    }

    /**
     * T·∫°o th√¥ng b√°o m·ªõi
     * @param {Object} notification - Th√¥ng tin th√¥ng b√°o
     * @returns {Promise<Object>} - Th√¥ng b√°o ƒë√£ t·∫°o
     */
    async createNotification(notification) {
        try {
            // T·∫°o th√¥ng b√°o m·ªõi trong database
            const newNotification = await prisma.notification.create({
                data: {
                    message: notification.message,
                    type: notification.type,
                    source: notification.source || null,
                    value: notification.value ? String(notification.value) : null,
                    deviceId: notification.deviceId,
                }
            });

            // G·ª≠i th√¥ng b√°o qua Socket.IO n·∫øu ƒë√£ thi·∫øt l·∫≠p
            if (this.io) {
                this.io.emit('new-notification', newNotification);
            }

            console.log(`üì¢ ƒê√£ t·∫°o th√¥ng b√°o: ${notification.message}`);
            return newNotification;
        } catch (error) {
            console.error('L·ªói khi t·∫°o th√¥ng b√°o:', error);
            throw error;
        }
    }

    /**
     * T·∫°o th√¥ng b√°o v·ªÅ ng∆∞·ª°ng gi√° tr·ªã
     * @param {Object} device - Th√¥ng tin thi·∫øt b·ªã
     * @param {Object} feed - Th√¥ng tin feed
     * @param {number} value - Gi√° tr·ªã hi·ªán t·∫°i
     * @param {boolean} isOverMax - C√≥ v∆∞·ª£t qu√° ng∆∞·ª°ng t·ªëi ƒëa kh√¥ng
     * @returns {Promise<Object>} - Th√¥ng b√°o ƒë√£ t·∫°o
     */
    async createThresholdNotification(device, feed, value, isOverMax) {
        try {
            // L·∫•y c·∫•u h√¨nh m·ªõi nh·∫•t t·ª´ b·∫£ng configuration d·ª±a theo updatedAt
            const latestConfig = await prisma.configuration.findFirst({
                orderBy: { updatedAt: 'desc' }
            });

            if (!latestConfig) {
                throw new Error("Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh h·ªá th·ªëng!");
            }

            // X√°c ƒë·ªãnh threshold d·ª±a tr√™n lo·∫°i feed, chuy·ªÉn v·ªÅ ch·ªØ th∆∞·ªùng ƒë·ªÉ ƒë·∫£m b·∫£o nh·∫•t qu√°n
            let threshold;
            // Chuy·ªÉn feed.name v√† feed.feedKey v·ªÅ ch·ªØ th∆∞·ªùng ƒë·ªÉ so s√°nh kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng
            const feedNameLower = feed.name.toLowerCase();
            const feedKeyLower = feed.feedKey ? feed.feedKey.toLowerCase() : '';

            console.log(`üîç ƒêang x√°c ƒë·ªãnh lo·∫°i c·ªßa feed: ${feed.name} (${feed.feedKey})`);

            // Ki·ªÉm tra xem feed c√≥ li√™n quan ƒë·∫øn nhi·ªát ƒë·ªô kh√¥ng
            if (feedNameLower.includes('temp') || 
                feedNameLower.includes('temperature') || 
                feedNameLower.includes('nhiet') || 
                feedKeyLower.includes('temp') || 
                feedKeyLower.includes('nhiet') || 
                feedKeyLower.includes('nhietdo')) {
                
                console.log(`‚úÖ X√°c ƒë·ªãnh feed "${feed.name}" l√† lo·∫°i: Nhi·ªát ƒë·ªô`);
                threshold = isOverMax ? latestConfig.temperatureMax : latestConfig.temperatureMin;
            }
            // Ki·ªÉm tra xem feed c√≥ li√™n quan ƒë·∫øn ƒë·ªô ·∫©m kh√¥ng kh√≠ kh√¥ng
            else if (feedNameLower.includes('humid') || 
                    feedNameLower.includes('humidity') || 
                    feedNameLower.includes('doam') || 
                    feedKeyLower.includes('humid') || 
                    feedKeyLower.includes('doam') || 
                    !feedNameLower.includes('soil') && (feedNameLower.includes('moisture') || feedKeyLower.includes('moisture'))) {
                
                console.log(`‚úÖ X√°c ƒë·ªãnh feed "${feed.name}" l√† lo·∫°i: ƒê·ªô ·∫©m kh√¥ng kh√≠`);
                threshold = isOverMax ? latestConfig.humidityMax : latestConfig.humidityMin;
            }
            // Ki·ªÉm tra xem feed c√≥ li√™n quan ƒë·∫øn ƒë·ªô ·∫©m ƒë·∫•t kh√¥ng
            else if (feedNameLower.includes('soil') || 
                    feedNameLower.includes('dat') || 
                    feedKeyLower.includes('soil') || 
                    feedKeyLower.includes('dat') || 
                    feedKeyLower.includes('doamdat') || 
                    (feedNameLower.includes('soil') && feedNameLower.includes('moisture'))) {
                
                console.log(`‚úÖ X√°c ƒë·ªãnh feed "${feed.name}" l√† lo·∫°i: ƒê·ªô ·∫©m ƒë·∫•t`);
                threshold = isOverMax ? latestConfig.soilMoistureMax : latestConfig.soilMoistureMin;
            }
            else {
                // N·∫øu kh√¥ng th·ªÉ x√°c ƒë·ªãnh, th·ª≠ t·ª´ng lo·∫°i
                console.log(`‚ö†Ô∏è Kh√¥ng th·ªÉ x√°c ƒë·ªãnh lo·∫°i c·ªßa feed: ${feed.name} (${feed.feedKey}), ƒëang th·ª≠ x√°c ƒë·ªãnh theo c√°c t·ª´ kh√≥a`);
                
                // Object mapping cho c√°c lo·∫°i feed v√† gi√° tr·ªã c·∫•u h√¨nh t∆∞∆°ng ·ª©ng
                const configMap = {
                    'humidity': { max: latestConfig.humidityMax, min: latestConfig.humidityMin, type: 'ƒê·ªô ·∫©m kh√¥ng kh√≠' },
                    'temperature': { max: latestConfig.temperatureMax, min: latestConfig.temperatureMin, type: 'Nhi·ªát ƒë·ªô' },
                    'soil': { max: latestConfig.soilMoistureMax, min: latestConfig.soilMoistureMin, type: 'ƒê·ªô ·∫©m ƒë·∫•t' },
                    'moisture': { max: latestConfig.soilMoistureMax, min: latestConfig.soilMoistureMin, type: 'ƒê·ªô ·∫©m ƒë·∫•t' }
                };
                
                // T√¨m t·ª´ kh√≥a ph√π h·ª£p trong t√™n feed ho·∫∑c feedKey
                const matchedKey = Object.keys(configMap).find(key => 
                    feedNameLower.includes(key) || 
                    feedKeyLower.includes(key)
                );
                
                if (matchedKey) {
                    console.log(`‚úÖ X√°c ƒë·ªãnh feed "${feed.name}" l√† lo·∫°i: ${configMap[matchedKey].type} theo t·ª´ kh√≥a "${matchedKey}"`);
                    threshold = isOverMax ? configMap[matchedKey].max : configMap[matchedKey].min;
                } else {
                    console.error(`‚ùå Kh√¥ng th·ªÉ x√°c ƒë·ªãnh lo·∫°i c·ªßa feed: ${feed.name} (${feed.feedKey})`);
                    throw new Error(`Lo·∫°i feed kh√¥ng h·ª£p l·ªá: ${feed.name}`);
                }
            }

            console.log(`üå°Ô∏è Ng∆∞·ª°ng ƒë√£ x√°c ƒë·ªãnh: ${threshold} (${isOverMax ? 'T·ªëi ƒëa' : 'T·ªëi thi·ªÉu'})`);
            const message = `${device.deviceCode}: Gi√° tr·ªã ${feed.name} (${value}) ${isOverMax ? 'v∆∞·ª£t qu√° ng∆∞·ª°ng t·ªëi ƒëa' : 'd∆∞·ªõi ng∆∞·ª°ng t·ªëi thi·ªÉu'} (${threshold})`;

            return this.createNotification({
                message,
                type: 'THRESHOLD',
                source: device.deviceCode,
                deviceId: device.id,
                value: String(value)
            });
        } catch (error) {
            console.error('L·ªói khi t·∫°o th√¥ng b√°o ng∆∞·ª°ng:', error);
            throw error;
        }
    }

    /**
     * T·∫°o th√¥ng b√°o v·ªÅ k·∫øt n·ªëi thi·∫øt b·ªã
     * @param {Object} device - Th√¥ng tin thi·∫øt b·ªã
     * @param {boolean} isConnected - Thi·∫øt b·ªã ƒë√£ k·∫øt n·ªëi hay ng·∫Øt k·∫øt n·ªëi
     * @returns {Promise<Object>} - Th√¥ng b√°o ƒë√£ t·∫°o
     */
    async createConnectionNotification(device, isConnected) {
        const message = `Thi·∫øt b·ªã ${device.deviceCode} ƒë√£ ${isConnected ? 'k·∫øt n·ªëi th√†nh c√¥ng' : 'ng·∫Øt k·∫øt n·ªëi'}`;
        
        return this.createNotification({
            message,
            type: 'CONNECTION',
            source: device.deviceCode,
            deviceId: device.id,
            value: isConnected ? 'connected' : 'disconnected'
        });
    }

    /**
     * T·∫°o th√¥ng b√°o v·ªÅ m√°y b∆°m
     * @param {Object} device - Th√¥ng tin thi·∫øt b·ªã
     * @param {boolean} isOn - M√°y b∆°m ƒë√£ b·∫≠t hay t·∫Øt
     * @param {number} speed - T·ªëc ƒë·ªô m√°y b∆°m (n·∫øu ƒëang b·∫≠t)
     * @returns {Promise<Object>} - Th√¥ng b√°o ƒë√£ t·∫°o
     */
    async createPumpNotification(device, isOn, speed = 0) {
        const message = `M√°y b∆°m ${device.deviceCode} ƒë√£ ƒë∆∞·ª£c ${isOn ? `B·∫¨T v·ªõi t·ªëc ƒë·ªô ${speed}%` : 'T·∫ÆT'}`;
        
        return this.createNotification({
            message,
            type: 'PUMP',
            source: device.deviceCode,
            deviceId: device.id,
            value: isOn ? String(speed) : '0'
        });
    }

    /**
     * T·∫°o th√¥ng b√°o c·∫≠p nh·∫≠t thi·∫øt b·ªã
     * @param {Object} device - Th√¥ng tin thi·∫øt b·ªã
     * @param {Object} changes - C√°c thay ƒë·ªïi ƒë√£ th·ª±c hi·ªán
     * @returns {Promise<Object>} - Th√¥ng b√°o ƒë√£ t·∫°o
     */
    async createUpdateNotification(device, changes) {
        // T·∫°o chu·ªói m√¥ t·∫£ c√°c thay ƒë·ªïi
        const changesText = Object.entries(changes)
            .map(([key, value]) => `${key}: ${value}`)
            .join(', ');
        
        const message = `Thi·∫øt b·ªã ${device.deviceCode} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t: ${changesText}`;
        
        return this.createNotification({
            message,
            type: 'UPDATE',
            source: device.deviceCode,
            deviceId: device.id,
            value: JSON.stringify(changes)
        });
    }

    /**
     * T·∫°o th√¥ng b√°o test
     * @param {Object} device - Th√¥ng tin thi·∫øt b·ªã
     * @param {string} message - N·ªôi dung th√¥ng b√°o
     * @param {string} value - Gi√° tr·ªã t√πy ch·ªânh
     * @returns {Promise<Object>} - Th√¥ng b√°o ƒë√£ t·∫°o
     */
    async createTestNotification(device, message, value = null) {
        return this.createNotification({
            message,
            type: 'TEST',
            source: device.deviceCode,
            deviceId: device.id,
            value
        });
    }

    /**
     * T·∫°o th√¥ng b√°o khi ng∆∞·ªùi d√πng ƒëi·ªÅu ch·ªânh t·ªëc ƒë·ªô m√°y b∆°m
     * @param {Object} device - Th√¥ng tin thi·∫øt b·ªã
     * @param {number} speed - T·ªëc ƒë·ªô m√°y b∆°m m·ªõi
     * @param {string} username - T√™n ng∆∞·ªùi d√πng th·ª±c hi·ªán h√†nh ƒë·ªông
     * @returns {Promise<Object>} - Th√¥ng b√°o ƒë√£ t·∫°o
     */
    async createPumpSpeedAdjustmentNotification(device, speed, username = 'Ng∆∞·ªùi d√πng') {
        const message = `${username} ƒë√£ ƒëi·ªÅu ch·ªânh t·ªëc ƒë·ªô m√°y b∆°m ${device.deviceCode} th√†nh ${speed}%`;
        
        return this.createNotification({
            message,
            type: 'USER_ACTION',
            source: device.deviceCode,
            deviceId: device.id,
            value: String(speed)
        });
    }

    /**
     * T·∫°o th√¥ng b√°o khi ng∆∞·ªùi d√πng b·∫≠t/t·∫Øt ƒë√®n
     * @param {Object} device - Th√¥ng tin thi·∫øt b·ªã
     * @param {boolean} isOn - Tr·∫°ng th√°i b·∫≠t/t·∫Øt
     * @param {string} username - T√™n ng∆∞·ªùi d√πng th·ª±c hi·ªán h√†nh ƒë·ªông
     * @returns {Promise<Object>} - Th√¥ng b√°o ƒë√£ t·∫°o
     */
    async createLightToggleNotification(device, isOn, username = 'Ng∆∞·ªùi d√πng') {
        const message = `${username} ƒë√£ ${isOn ? 'B·∫¨T' : 'T·∫ÆT'} ƒë√®n ${device.deviceCode}`;
        
        return this.createNotification({
            message,
            type: 'USER_ACTION',
            source: device.deviceCode,
            deviceId: device.id,
            value: isOn ? 'On' : 'Off'
        });
    }

    /**
     * T·∫°o th√¥ng b√°o khi ng∆∞·ªùi d√πng l∆∞u c·∫•u h√¨nh t·ª± ƒë·ªông
     * @param {Object} device - Th√¥ng tin thi·∫øt b·ªã
     * @param {Object} config - Th√¥ng tin c·∫•u h√¨nh
     * @param {string} username - T√™n ng∆∞·ªùi d√πng th·ª±c hi·ªán h√†nh ƒë·ªông
     * @returns {Promise<Object>} - Th√¥ng b√°o ƒë√£ t·∫°o
     */
    async createAutomationConfigNotification(device, config, username = 'Ng∆∞·ªùi d√πng') {
        const configType = config.scheduleType || 'unknown';
        let configDetails = '';
        
        if (configType === 'watering') {
            configDetails = `th·ªùi gian: ${config.startTime}, th·ªùi l∆∞·ª£ng: ${config.duration} ph√∫t, t·ªëc ƒë·ªô: ${config.speed}%`;
        } else if (configType === 'lighting') {
            configDetails = `th·ªùi gian b·∫≠t: ${config.startTime}, th·ªùi gian t·∫Øt: ${config.endTime}`;
        }
        
        const message = `${username} ƒë√£ c·∫•u h√¨nh t·ª± ƒë·ªông ${configType} cho thi·∫øt b·ªã ${device.deviceCode} (${configDetails})`;
        
        return this.createNotification({
            message,
            type: 'AUTOMATION',
            source: device.deviceCode,
            deviceId: device.id,
            value: JSON.stringify(config)
        });
    }

    /**
     * L·∫•y danh s√°ch th√¥ng b√°o m·ªõi nh·∫•t
     * @param {number} limit - S·ªë l∆∞·ª£ng th√¥ng b√°o t·ªëi ƒëa
     * @returns {Promise<Array>} - Danh s√°ch th√¥ng b√°o
     */
    async getLatestNotifications(limit = 20) {
        try {
            return await prisma.notification.findMany({
                take: limit,
                orderBy: { createdAt: 'desc' },
                include: { iotdevice: true }
            });
        } catch (error) {
            console.error('L·ªói khi l·∫•y danh s√°ch th√¥ng b√°o:', error);
            throw error;
        }
    }
}

// T·∫°o v√† xu·∫•t instance duy nh·∫•t
const notificationService = new NotificationService();
module.exports = notificationService;
