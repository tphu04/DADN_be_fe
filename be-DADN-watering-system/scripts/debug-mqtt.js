require('dotenv').config();
const mqtt = require('mqtt');
const prisma = require('../config/database');

async function debugMQTT() {
    try {
        console.log('===== B·∫ÆT ƒê·∫¶U DEBUG MQTT =====\n');
        
        // 1. Ki·ªÉm tra th√¥ng tin trong .env
        console.log('1. Th√¥ng tin c·∫•u h√¨nh MQTT:');
        console.log(`MQTT_HOST: ${process.env.MQTT_HOST}`);
        console.log(`MQTT_PORT: ${process.env.MQTT_PORT}`);
        console.log(`MQTT_USERNAME: ${process.env.MQTT_USERNAME}`);
        console.log(`MQTT_API_KEY: ${process.env.MQTT_API_KEY.substring(0, 6)}...`); 
        console.log(`MQTT_TOPICS: ${process.env.MQTT_TOPICS}`);
        console.log('\n');
        
        // 2. Ki·ªÉm tra thi·∫øt b·ªã trong database
        console.log('2. Thi·∫øt b·ªã trong database:');
        const devices = await prisma.iotdevice.findMany({
            include: { feed: true }
        });
        
        if (devices.length === 0) {
            console.log('Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã n√†o trong database.');
        } else {
            console.log(`T√¨m th·∫•y ${devices.length} thi·∫øt b·ªã trong database:`);
            
            for (const device of devices) {
                console.log(`\nThi·∫øt b·ªã ID ${device.id}:`);
                console.log(`M√£ thi·∫øt b·ªã: ${device.deviceCode}`);
                console.log(`Lo·∫°i thi·∫øt b·ªã: ${device.deviceType}`);
                
                // Ki·ªÉm tra tr·∫°ng th√°i online d·ª±a tr√™n lastSeenAt
                const isOnline = device.lastSeenAt && (new Date().getTime() - new Date(device.lastSeenAt).getTime() < 5 * 60 * 1000);
                console.log(`Tr·∫°ng th√°i online: ${isOnline ? 'Online' : 'Offline'}`);
                console.log(`Th·ªùi gian ho·∫°t ƒë·ªông cu·ªëi: ${device.lastSeenAt || 'Ch∆∞a k·∫øt n·ªëi'}`);
                
                if (device.feed && device.feed.length > 0) {
                    console.log(`Feeds (${device.feed.length}):`);
                    device.feed.forEach((feed, index) => {
                        console.log(`  ${index + 1}. ${feed.name} (${feed.feedKey}) - Gi√° tr·ªã cu·ªëi: ${feed.lastValue || 'Ch∆∞a c√≥'}`);
                    });
                } else {
                    console.log('Thi·∫øt b·ªã ch∆∞a c√≥ feeds n√†o.');
                }
            }
        }
        console.log('\n');
        
        // 3. Ki·ªÉm tra d·ªØ li·ªáu ƒë√£ l∆∞u
        console.log('3. Ki·ªÉm tra d·ªØ li·ªáu ƒë√£ l∆∞u:');
        
        // Ki·ªÉm tra d·ªØ li·ªáu nhi·ªát ƒë·ªô, ƒë·ªô ·∫©m
        const tempHumidData = await prisma.temperaturehumiditydata.findMany({
            take: 5,
            orderBy: { readingTime: 'desc' }
        });
        
        if (tempHumidData.length > 0) {
            console.log(`D·ªØ li·ªáu nhi·ªát ƒë·ªô v√† ƒë·ªô ·∫©m (${tempHumidData.length} b·∫£n ghi m·ªõi nh·∫•t):`);
            tempHumidData.forEach((data, index) => {
                console.log(`  ${index + 1}. Thi·∫øt b·ªã ID ${data.deviceId}: Nhi·ªát ƒë·ªô ${data.temperature}¬∞C, ƒê·ªô ·∫©m ${data.humidity}%, Th·ªùi gian: ${data.readingTime}`);
            });
        } else {
            console.log('Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu nhi·ªát ƒë·ªô v√† ƒë·ªô ·∫©m.');
        }
        
        // Ki·ªÉm tra d·ªØ li·ªáu ƒë·ªô ·∫©m ƒë·∫•t
        const soilData = await prisma.soilmoisturedata.findMany({
            take: 5,
            orderBy: { readingTime: 'desc' }
        });
        
        if (soilData.length > 0) {
            console.log(`\nD·ªØ li·ªáu ƒë·ªô ·∫©m ƒë·∫•t (${soilData.length} b·∫£n ghi m·ªõi nh·∫•t):`);
            soilData.forEach((data, index) => {
                console.log(`  ${index + 1}. Thi·∫øt b·ªã ID ${data.deviceId}: ƒê·ªô ·∫©m ƒë·∫•t ${data.moistureValue}%, Th·ªùi gian: ${data.readingTime}`);
            });
        } else {
            console.log('\nKh√¥ng t√¨m th·∫•y d·ªØ li·ªáu ƒë·ªô ·∫©m ƒë·∫•t.');
        }
        
        // Ki·ªÉm tra d·ªØ li·ªáu m√°y b∆°m
        const pumpData = await prisma.pumpwaterdata.findMany({
            take: 5,
            orderBy: { readingTime: 'desc' }
        });
        
        if (pumpData.length > 0) {
            console.log(`\nD·ªØ li·ªáu m√°y b∆°m (${pumpData.length} b·∫£n ghi m·ªõi nh·∫•t):`);
            pumpData.forEach((data, index) => {
                console.log(`  ${index + 1}. Thi·∫øt b·ªã ID ${data.deviceId}: Tr·∫°ng th√°i ${data.status}, T·ªëc ƒë·ªô ${data.pumpSpeed}%, Th·ªùi gian: ${data.readingTime}`);
            });
        } else {
            console.log('\nKh√¥ng t√¨m th·∫•y d·ªØ li·ªáu m√°y b∆°m.');
        }
        
        console.log('\n');
        
        // 4. K·∫øt n·ªëi MQTT v√† ƒëƒÉng k√Ω l·∫Øng nghe
        console.log('4. K·∫øt n·ªëi MQTT v√† l·∫Øng nghe:');
        
        const username = process.env.MQTT_USERNAME;
        const password = process.env.MQTT_API_KEY;
        const broker = process.env.MQTT_HOST || 'io.adafruit.com';
        
        console.log(`ƒêang k·∫øt n·ªëi t·ªõi MQTT broker: mqtt://${username}:***@${broker}`);
        
        const client = mqtt.connect(`mqtt://${broker}`, {
            port: process.env.MQTT_PORT || 1883,
            username: username, 
            password: password,
            clientId: 'debug_' + Math.random().toString(16).substring(2, 8)
        });
        
        // Thi·∫øt l·∫≠p timeout 30 gi√¢y
        const timeout = setTimeout(() => {
            console.log('\nH·∫øt th·ªùi gian ƒë·ª£i, ƒë√≥ng k·∫øt n·ªëi MQTT.');
            client.end();
            console.log('\n===== K·∫æT TH√öC DEBUG MQTT =====');
            process.exit(0);
        }, 30000);
        
        client.on('connect', () => {
            console.log('‚úÖ ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng t·ªõi MQTT broker!');
            
            // ƒêƒÉng k√Ω c√°c topics t·ª´ thi·∫øt b·ªã
            const topics = [];
            
            // ƒêƒÉng k√Ω theo feeds c·ªßa thi·∫øt b·ªã
            devices.forEach(device => {
                if (device.feed && device.feed.length > 0) {
                    device.feed.forEach(feed => {
                        topics.push(`${username}/feeds/${feed.feedKey}`);
                    });
                }
            });
            
            // N·∫øu kh√¥ng c√≥ feeds, ƒëƒÉng k√Ω c√°c topics m·∫∑c ƒë·ªãnh
            if (topics.length === 0) {
                const defaultTopics = [
                    `${username}/feeds/dht20-nhietdo`,
                    `${username}/feeds/dht20-doam`,
                    `${username}/feeds/doamdat`,
                    `${username}/feeds/maybom`
                ];
                topics.push(...defaultTopics);
            }
            
            // ƒêƒÉng k√Ω l·∫Øng nghe t·∫•t c·∫£ c√°c topics
            topics.forEach(topic => {
                client.subscribe(topic, (err) => {
                    if (err) {
                        console.error(`‚ùå L·ªói ƒëƒÉng k√Ω topic ${topic}:`, err);
                    } else {
                        console.log(`‚úÖ ƒê√£ ƒëƒÉng k√Ω topic ${topic}`);
                    }
                });
            });
            
            console.log('\nƒêang l·∫Øng nghe c√°c tin nh·∫Øn MQTT... (ƒë·ª£i 30 gi√¢y)');
        });
        
        client.on('message', (topic, message) => {
            console.log(`üì© Nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn t·ª´ topic ${topic}: ${message.toString()}`);
        });
        
        client.on('error', (error) => {
            console.error('‚ùå L·ªói k·∫øt n·ªëi MQTT:', error);
            clearTimeout(timeout);
            process.exit(1);
        });
        
    } catch (error) {
        console.error('L·ªói khi debug MQTT:', error);
        process.exit(1);
    }
}

// Ch·∫°y script
debugMQTT(); 